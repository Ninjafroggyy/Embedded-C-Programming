CCS PCM C Compiler, Version 5.117d, 1               22-Oct-24 15:30
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   G:\My Drive\Academic\BEng (Hons) Embedded Electronics Systems Engineering\Level 4\Embedded C\Classwork\Proteus\PIC16F616_1\Debug.lst

               ROM used:   646 words (32%)
                           Largest free fragment is 1402
               RAM used:   9 (7%) at main() level
                           21 (16%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1BD
0003:  NOP
.................... #import(file="main.o")
.................... #define LCD_ENABLE_PIN PIN_C2
.................... #define LCD_ENABLE_PIN PIN_C2
.................... #define LCD_RS_PIN PIN_C0
.................... #define LCD_RW_PIN PIN_C1
.................... #define LCD_DATA4 PIN_C3
.................... #define LCD_DATA5 PIN_C4
.................... #define LCD_DATA6 PIN_C5
.................... #define LCD_DATA7 PIN_A5
.................... 
.................... #include <main.h>
.................... #include <16F616.h>
.................... //////////// Standard Header file for the PIC16F616 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F616
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  48
0009:  RETLW  65
000A:  RETLW  6C
000B:  RETLW  6C
000C:  RETLW  6F
000D:  RETLW  20
000E:  RETLW  25
000F:  RETLW  75
0010:  RETLW  20
0011:  RETLW  20
0012:  RETLW  20
0013:  RETLW  20
0014:  RETLW  00
0015:  BCF    0A.0
0016:  BCF    0A.1
0017:  BCF    0A.2
0018:  ADDWF  02,F
0019:  RETLW  54
001A:  RETLW  68
001B:  RETLW  69
001C:  RETLW  73
001D:  RETLW  20
001E:  RETLW  69
001F:  RETLW  73
0020:  RETLW  20
0021:  RETLW  25
0022:  RETLW  75
0023:  RETLW  20
0024:  RETLW  20
0025:  RETLW  00
*
0173:  MOVF   2B,W
0174:  CLRF   21
0175:  SUBWF  2A,W
0176:  BTFSC  03.0
0177:  GOTO   17B
0178:  MOVF   2A,W
0179:  MOVWF  20
017A:  GOTO   187
017B:  CLRF   20
017C:  MOVLW  08
017D:  MOVWF  2C
017E:  RLF    2A,F
017F:  RLF    20,F
0180:  MOVF   2B,W
0181:  SUBWF  20,W
0182:  BTFSC  03.0
0183:  MOVWF  20
0184:  RLF    21,F
0185:  DECFSZ 2C,F
0186:  GOTO   17E
0187:  RETURN
0188:  MOVF   21,W
0189:  MOVF   28,W
018A:  MOVWF  2A
018B:  MOVLW  64
018C:  MOVWF  2B
018D:  CALL   173
018E:  MOVF   20,W
018F:  MOVWF  28
0190:  MOVF   21,W
0191:  MOVLW  30
0192:  BTFSS  03.2
0193:  GOTO   19B
0194:  BTFSS  29.1
0195:  GOTO   1A2
0196:  BTFSC  29.3
0197:  GOTO   1A2
0198:  BTFSC  29.4
0199:  MOVLW  20
019A:  GOTO   19E
019B:  BCF    29.3
019C:  BCF    29.4
019D:  BSF    29.0
019E:  ADDWF  21,F
019F:  MOVF   21,W
01A0:  MOVWF  2A
01A1:  CALL   147
01A2:  MOVF   28,W
01A3:  MOVWF  2A
01A4:  MOVLW  0A
01A5:  MOVWF  2B
01A6:  CALL   173
01A7:  MOVF   20,W
01A8:  MOVWF  28
01A9:  MOVF   21,W
01AA:  MOVLW  30
01AB:  BTFSS  03.2
01AC:  GOTO   1B3
01AD:  BTFSC  29.3
01AE:  GOTO   1B7
01AF:  BTFSS  29.0
01B0:  GOTO   1B7
01B1:  BTFSC  29.4
01B2:  MOVLW  20
01B3:  ADDWF  21,F
01B4:  MOVF   21,W
01B5:  MOVWF  2A
01B6:  CALL   147
01B7:  MOVLW  30
01B8:  ADDWF  28,F
01B9:  MOVF   28,W
01BA:  MOVWF  2A
01BB:  CALL   147
01BC:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=8
.................... 
.................... #FUSES PUT                   	//Power Up Timer
.................... #FUSES BROWNOUT              	//Reset when brownout detected
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O
.................... #FUSES NOPROTECT             	//Code not protected from reading
.................... 
.................... #use delay(internal=8MHz)
*
0026:  MOVLW  2D
0027:  MOVWF  04
0028:  MOVF   00,W
0029:  BTFSC  03.2
002A:  GOTO   038
002B:  MOVLW  02
002C:  MOVWF  21
002D:  CLRF   20
002E:  DECFSZ 20,F
002F:  GOTO   02E
0030:  DECFSZ 21,F
0031:  GOTO   02D
0032:  MOVLW  97
0033:  MOVWF  20
0034:  DECFSZ 20,F
0035:  GOTO   034
0036:  DECFSZ 00,F
0037:  GOTO   02B
0038:  RETURN
.................... 
.................... #define LED PIN_A2
.................... #define DELAY 500
.................... 
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
009E:  BSF    07.3
....................    output_float(LCD_DATA5);
009F:  BSF    07.4
....................    output_float(LCD_DATA6);
00A0:  BSF    07.5
....................    output_float(LCD_DATA7);
00A1:  BSF    05.5
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00A2:  BCF    03.5
00A3:  BSF    07.1
00A4:  BSF    03.5
00A5:  BCF    07.1
....................    delay_cycles(1);
00A6:  NOP
....................    lcd_output_enable(1);
00A7:  BCF    03.5
00A8:  BSF    07.2
00A9:  BSF    03.5
00AA:  BCF    07.2
....................    delay_cycles(1);
00AB:  NOP
....................    high = lcd_read_nibble();
00AC:  BCF    03.5
00AD:  CALL   065
00AE:  MOVF   21,W
00AF:  MOVWF  32
....................       
....................    lcd_output_enable(0);
00B0:  BCF    07.2
00B1:  BSF    03.5
00B2:  BCF    07.2
....................    delay_cycles(1);
00B3:  NOP
....................    lcd_output_enable(1);
00B4:  BCF    03.5
00B5:  BSF    07.2
00B6:  BSF    03.5
00B7:  BCF    07.2
....................    delay_us(1);
00B8:  GOTO   0B9
....................    low = lcd_read_nibble();
00B9:  BCF    03.5
00BA:  CALL   065
00BB:  MOVF   21,W
00BC:  MOVWF  31
....................       
....................    lcd_output_enable(0);
00BD:  BCF    07.2
00BE:  BSF    03.5
00BF:  BCF    07.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00C0:  BCF    07.3
....................    output_drive(LCD_DATA5);
00C1:  BCF    07.4
....................    output_drive(LCD_DATA6);
00C2:  BCF    07.5
....................    output_drive(LCD_DATA7);
00C3:  BCF    05.5
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00C4:  BCF    03.5
00C5:  SWAPF  32,W
00C6:  MOVWF  20
00C7:  MOVLW  F0
00C8:  ANDWF  20,F
00C9:  MOVF   20,W
00CA:  IORWF  31,W
00CB:  MOVWF  21
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0065:  CLRF   33
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0066:  BSF    03.5
0067:  BSF    07.3
0068:  MOVLW  00
0069:  BCF    03.5
006A:  BTFSC  07.3
006B:  MOVLW  01
006C:  IORWF  33,F
....................    n |= input(LCD_DATA5) << 1;
006D:  BSF    03.5
006E:  BSF    07.4
006F:  MOVLW  00
0070:  BCF    03.5
0071:  BTFSC  07.4
0072:  MOVLW  01
0073:  MOVWF  20
0074:  BCF    03.0
0075:  RLF    20,F
0076:  MOVF   20,W
0077:  IORWF  33,F
....................    n |= input(LCD_DATA6) << 2;
0078:  BSF    03.5
0079:  BSF    07.5
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  07.5
007D:  MOVLW  01
007E:  MOVWF  20
007F:  RLF    20,F
0080:  RLF    20,F
0081:  MOVLW  FC
0082:  ANDWF  20,F
0083:  MOVF   20,W
0084:  IORWF  33,F
....................    n |= input(LCD_DATA7) << 3;
0085:  BSF    03.5
0086:  BSF    05.5
0087:  MOVLW  00
0088:  BCF    03.5
0089:  BTFSC  05.5
008A:  MOVLW  01
008B:  MOVWF  20
008C:  RLF    20,F
008D:  RLF    20,F
008E:  RLF    20,F
008F:  MOVLW  F8
0090:  ANDWF  20,F
0091:  MOVF   20,W
0092:  IORWF  33,F
....................    
....................    return(n);
0093:  MOVF   33,W
0094:  MOVWF  21
....................   #else
0095:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0039:  BTFSC  32.0
003A:  GOTO   03D
003B:  BCF    07.3
003C:  GOTO   03E
003D:  BSF    07.3
003E:  BSF    03.5
003F:  BCF    07.3
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0040:  BCF    03.5
0041:  BTFSC  32.1
0042:  GOTO   045
0043:  BCF    07.4
0044:  GOTO   046
0045:  BSF    07.4
0046:  BSF    03.5
0047:  BCF    07.4
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0048:  BCF    03.5
0049:  BTFSC  32.2
004A:  GOTO   04D
004B:  BCF    07.5
004C:  GOTO   04E
004D:  BSF    07.5
004E:  BSF    03.5
004F:  BCF    07.5
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0050:  BCF    03.5
0051:  BTFSC  32.3
0052:  GOTO   055
0053:  BCF    05.5
0054:  GOTO   056
0055:  BSF    05.5
0056:  BSF    03.5
0057:  BCF    05.5
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0058:  NOP
....................    lcd_output_enable(1);
0059:  BCF    03.5
005A:  BSF    07.2
005B:  BSF    03.5
005C:  BCF    07.2
....................    delay_us(2);
005D:  GOTO   05E
005E:  GOTO   05F
....................    lcd_output_enable(0);
005F:  BCF    03.5
0060:  BCF    07.2
0061:  BSF    03.5
0062:  BCF    07.2
0063:  BCF    03.5
0064:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0096:  BSF    03.5
0097:  BCF    07.2
....................    lcd_rs_tris();
0098:  BCF    07.0
....................    lcd_rw_tris();
0099:  BCF    07.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
009A:  BCF    03.5
009B:  BCF    07.0
009C:  BSF    03.5
009D:  BCF    07.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00CC:  MOVF   21,W
00CD:  MOVWF  31
00CE:  BTFSS  31.7
00CF:  GOTO   0D2
00D0:  BSF    03.5
00D1:  GOTO   09E
....................    lcd_output_rs(address);
00D2:  MOVF   2F,F
00D3:  BTFSS  03.2
00D4:  GOTO   0D7
00D5:  BCF    07.0
00D6:  GOTO   0D8
00D7:  BSF    07.0
00D8:  BSF    03.5
00D9:  BCF    07.0
....................    delay_cycles(1);
00DA:  NOP
....................    lcd_output_rw(0);
00DB:  BCF    03.5
00DC:  BCF    07.1
00DD:  BSF    03.5
00DE:  BCF    07.1
....................    delay_cycles(1);
00DF:  NOP
....................    lcd_output_enable(0);
00E0:  BCF    03.5
00E1:  BCF    07.2
00E2:  BSF    03.5
00E3:  BCF    07.2
....................    lcd_send_nibble(n >> 4);
00E4:  BCF    03.5
00E5:  SWAPF  30,W
00E6:  MOVWF  31
00E7:  MOVLW  0F
00E8:  ANDWF  31,F
00E9:  MOVF   31,W
00EA:  MOVWF  32
00EB:  CALL   039
....................    lcd_send_nibble(n & 0xf);
00EC:  MOVF   30,W
00ED:  ANDLW  0F
00EE:  MOVWF  31
00EF:  MOVWF  32
00F0:  CALL   039
00F1:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00F2:  MOVLW  28
00F3:  MOVWF  29
00F4:  MOVLW  0C
00F5:  MOVWF  2A
00F6:  MOVLW  01
00F7:  MOVWF  2B
00F8:  MOVLW  06
00F9:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00FA:  BCF    07.2
00FB:  BSF    03.5
00FC:  BCF    07.2
....................    lcd_output_rs(0);
00FD:  BCF    03.5
00FE:  BCF    07.0
00FF:  BSF    03.5
0100:  BCF    07.0
....................    lcd_output_rw(0);
0101:  BCF    03.5
0102:  BCF    07.1
0103:  BSF    03.5
0104:  BCF    07.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0105:  BCF    07.3
....................    output_drive(LCD_DATA5);
0106:  BCF    07.4
....................    output_drive(LCD_DATA6);
0107:  BCF    07.5
....................    output_drive(LCD_DATA7);
0108:  BCF    05.5
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0109:  BCF    07.2
....................    lcd_rs_tris();
010A:  BCF    07.0
....................    lcd_rw_tris();
010B:  BCF    07.1
....................  #endif
....................     
....................    delay_ms(15);
010C:  MOVLW  0F
010D:  BCF    03.5
010E:  MOVWF  2D
010F:  CALL   026
....................    for(i=1;i<=3;++i)
0110:  MOVLW  01
0111:  MOVWF  28
0112:  MOVF   28,W
0113:  SUBLW  03
0114:  BTFSS  03.0
0115:  GOTO   11E
....................    {
....................        lcd_send_nibble(3);
0116:  MOVLW  03
0117:  MOVWF  32
0118:  CALL   039
....................        delay_ms(5);
0119:  MOVLW  05
011A:  MOVWF  2D
011B:  CALL   026
011C:  INCF   28,F
011D:  GOTO   112
....................    }
....................    
....................    lcd_send_nibble(2);
011E:  MOVLW  02
011F:  MOVWF  32
0120:  CALL   039
....................    delay_ms(5);
0121:  MOVLW  05
0122:  MOVWF  2D
0123:  CALL   026
....................    for(i=0;i<=3;++i)
0124:  CLRF   28
0125:  MOVF   28,W
0126:  SUBLW  03
0127:  BTFSS  03.0
0128:  GOTO   134
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0129:  MOVLW  29
012A:  ADDWF  28,W
012B:  MOVWF  04
012C:  MOVF   00,W
012D:  MOVWF  2D
012E:  CLRF   2F
012F:  MOVF   2D,W
0130:  MOVWF  30
0131:  CALL   096
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0132:  INCF   28,F
0133:  GOTO   125
0134:  GOTO   1DB (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0135:  DECFSZ 2C,W
0136:  GOTO   138
0137:  GOTO   13B
....................       address=LCD_LINE_TWO;
0138:  MOVLW  40
0139:  MOVWF  2D
013A:  GOTO   13C
....................    else
....................       address=0;
013B:  CLRF   2D
....................      
....................    address+=x-1;
013C:  MOVLW  01
013D:  SUBWF  2B,W
013E:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address);
013F:  MOVF   2D,W
0140:  IORLW  80
0141:  MOVWF  2E
0142:  CLRF   2F
0143:  MOVF   2E,W
0144:  MOVWF  30
0145:  CALL   096
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0146:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0147:  MOVF   2A,W
0148:  XORLW  07
0149:  BTFSC  03.2
014A:  GOTO   155
014B:  XORLW  0B
014C:  BTFSC  03.2
014D:  GOTO   15A
014E:  XORLW  06
014F:  BTFSC  03.2
0150:  GOTO   162
0151:  XORLW  02
0152:  BTFSC  03.2
0153:  GOTO   168
0154:  GOTO   16D
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0155:  MOVLW  01
0156:  MOVWF  2B
0157:  MOVWF  2C
0158:  CALL   135
0159:  GOTO   172
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
015A:  CLRF   2F
015B:  MOVLW  01
015C:  MOVWF  30
015D:  CALL   096
....................                      delay_ms(2);
015E:  MOVLW  02
015F:  MOVWF  2D
0160:  CALL   026
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0161:  GOTO   172
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0162:  MOVLW  01
0163:  MOVWF  2B
0164:  MOVLW  02
0165:  MOVWF  2C
0166:  CALL   135
0167:  GOTO   172
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0168:  CLRF   2F
0169:  MOVLW  10
016A:  MOVWF  30
016B:  CALL   096
016C:  GOTO   172
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
016D:  MOVLW  01
016E:  MOVWF  2F
016F:  MOVF   2A,W
0170:  MOVWF  30
0171:  CALL   096
....................      #endif
....................    }
0172:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int value = 0;
.................... unsigned int value1 = 0;
.................... unsigned int val = 0;
.................... unsigned int val1 = 0;
.................... 
.................... void main() {
*
01BD:  MOVF   03,W
01BE:  ANDLW  1F
01BF:  MOVWF  03
01C0:  CLRF   24
01C1:  CLRF   25
01C2:  CLRF   26
01C3:  CLRF   27
01C4:  BCF    1F.6
01C5:  MOVLW  00
01C6:  BSF    03.5
01C7:  MOVWF  11
01C8:  BCF    03.5
01C9:  CLRF   1A
01CA:  CLRF   1B
01CB:  CLRF   1C
01CC:  BSF    03.5
01CD:  CLRF   1A
01CE:  CLRF   19
....................    setup_adc_ports(sAN0, sAN1);
01CF:  BCF    03.5
01D0:  BCF    1F.6
01D1:  MOVLW  03
01D2:  BSF    03.5
01D3:  MOVWF  11
....................    setup_adc(ADC_CLOCK_INTERNAL);
01D4:  BSF    1F.4
01D5:  BSF    1F.5
01D6:  BCF    1F.6
01D7:  BCF    03.5
01D8:  BCF    1F.7
01D9:  BSF    1F.0
.................... 
....................    lcd_init();
01DA:  GOTO   0F2
.................... 
....................    while(TRUE) {
....................       //TODO: User Code  
....................       set_adc_channel(0);		// Select the ADC channel
01DB:  MOVLW  00
01DC:  MOVWF  21
01DD:  MOVF   1F,W
01DE:  ANDLW  C3
01DF:  IORWF  21,W
01E0:  MOVWF  1F
....................       delay_us(30);			// Delay 30 uS
01E1:  MOVLW  13
01E2:  MOVWF  20
01E3:  DECFSZ 20,F
01E4:  GOTO   1E3
01E5:  GOTO   1E6
....................       value = read_adc();		// Call the ADC conversion function
01E6:  BSF    1F.1
01E7:  BTFSC  1F.1
01E8:  GOTO   1E7
01E9:  MOVF   1E,W
01EA:  MOVWF  24
....................       
....................       set_adc_channel(1);		// Select the ADC channel
01EB:  MOVLW  04
01EC:  MOVWF  21
01ED:  MOVF   1F,W
01EE:  ANDLW  C3
01EF:  IORWF  21,W
01F0:  MOVWF  1F
....................       delay_us(30);			// Delay 30 uS
01F1:  MOVLW  13
01F2:  MOVWF  20
01F3:  DECFSZ 20,F
01F4:  GOTO   1F3
01F5:  GOTO   1F6
....................       value1 = read_adc();		// Call the ADC conversion function
01F6:  BSF    1F.1
01F7:  BTFSC  1F.1
01F8:  GOTO   1F7
01F9:  MOVF   1E,W
01FA:  MOVWF  25
....................       
....................       lcd_gotoxy(1, 1);		// Set the cursor at position 1,1 in the LCD
01FB:  MOVLW  01
01FC:  MOVWF  2B
01FD:  MOVWF  2C
01FE:  CALL   135
....................       printf(lcd_putc, "Hello %u    ", value);	
01FF:  CLRF   28
0200:  MOVF   28,W
0201:  CALL   004
0202:  INCF   28,F
0203:  MOVWF  20
0204:  MOVWF  2A
0205:  CALL   147
0206:  MOVLW  06
0207:  SUBWF  28,W
0208:  BTFSS  03.2
0209:  GOTO   200
020A:  MOVF   24,W
020B:  MOVWF  28
020C:  MOVLW  1B
020D:  MOVWF  29
020E:  CALL   188
020F:  MOVLW  08
0210:  MOVWF  28
0211:  MOVF   28,W
0212:  CALL   004
0213:  INCF   28,F
0214:  MOVWF  20
0215:  MOVWF  2A
0216:  CALL   147
0217:  MOVLW  0C
0218:  SUBWF  28,W
0219:  BTFSS  03.2
021A:  GOTO   211
.................... 	 
....................       lcd_gotoxy(1, 2);		
021B:  MOVLW  01
021C:  MOVWF  2B
021D:  MOVLW  02
021E:  MOVWF  2C
021F:  CALL   135
....................       printf(lcd_putc, "Hello %u    ", value1);	
0220:  CLRF   28
0221:  MOVF   28,W
0222:  CALL   004
0223:  INCF   28,F
0224:  MOVWF  20
0225:  MOVWF  2A
0226:  CALL   147
0227:  MOVLW  06
0228:  SUBWF  28,W
0229:  BTFSS  03.2
022A:  GOTO   221
022B:  MOVF   25,W
022C:  MOVWF  28
022D:  MOVLW  1B
022E:  MOVWF  29
022F:  CALL   188
0230:  MOVLW  08
0231:  MOVWF  28
0232:  MOVF   28,W
0233:  CALL   004
0234:  INCF   28,F
0235:  MOVWF  20
0236:  MOVWF  2A
0237:  CALL   147
0238:  MOVLW  0C
0239:  SUBWF  28,W
023A:  BTFSS  03.2
023B:  GOTO   232
.................... 
....................       
....................       if(input(Pin_a3)) {
023C:  BSF    03.5
023D:  BSF    05.3
023E:  BCF    03.5
023F:  BTFSS  05.3
0240:  GOTO   260
.................... 	 printf(lcd_putc, "\f");
0241:  MOVLW  0C
0242:  MOVWF  2A
0243:  CALL   147
.................... 	 lcd_gotoxy(26, 2);
0244:  MOVLW  1A
0245:  MOVWF  2B
0246:  MOVLW  02
0247:  MOVWF  2C
0248:  CALL   135
.................... 	 printf(lcd_putc, "This is %u  ", val);
0249:  CLRF   28
024A:  MOVF   28,W
024B:  CALL   015
024C:  INCF   28,F
024D:  MOVWF  20
024E:  MOVWF  2A
024F:  CALL   147
0250:  MOVLW  08
0251:  SUBWF  28,W
0252:  BTFSS  03.2
0253:  GOTO   24A
0254:  MOVF   26,W
0255:  MOVWF  28
0256:  MOVLW  1B
0257:  MOVWF  29
0258:  CALL   188
0259:  MOVLW  20
025A:  MOVWF  2A
025B:  CALL   147
025C:  MOVLW  20
025D:  MOVWF  2A
025E:  CALL   147
.................... 	 val++;
025F:  INCF   26,F
....................       }
....................       
....................       if(input(Pin_a4)) {
0260:  BSF    03.5
0261:  BSF    05.4
0262:  BCF    03.5
0263:  BTFSS  05.4
0264:  GOTO   284
.................... 	 printf(lcd_putc, "\f");
0265:  MOVLW  0C
0266:  MOVWF  2A
0267:  CALL   147
.................... 	 lcd_gotoxy(26, 1);
0268:  MOVLW  1A
0269:  MOVWF  2B
026A:  MOVLW  01
026B:  MOVWF  2C
026C:  CALL   135
.................... 	 printf(lcd_putc, "This is %u  ", val1);
026D:  CLRF   28
026E:  MOVF   28,W
026F:  CALL   015
0270:  INCF   28,F
0271:  MOVWF  20
0272:  MOVWF  2A
0273:  CALL   147
0274:  MOVLW  08
0275:  SUBWF  28,W
0276:  BTFSS  03.2
0277:  GOTO   26E
0278:  MOVF   27,W
0279:  MOVWF  28
027A:  MOVLW  1B
027B:  MOVWF  29
027C:  CALL   188
027D:  MOVLW  20
027E:  MOVWF  2A
027F:  CALL   147
0280:  MOVLW  20
0281:  MOVWF  2A
0282:  CALL   147
.................... 	 val1++;
0283:  INCF   27,F
....................       }
0284:  GOTO   1DB
....................    }
.................... }
.................... 
0285:  SLEEP

Configuration Fuses:
   Word  1: 3FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT IOSC8 BROWNOUT
