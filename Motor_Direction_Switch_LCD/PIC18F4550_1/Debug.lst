CCS PCH C Compiler, Version 5.103, 56135               02-Dec-24 10:48

               Filename:   C:\Users\S2317703\Documents\project 3\proteus\PIC18F4550_1\Debug.lst

               ROM used:   912 bytes (3%)
                           Largest free fragment is 31856
               RAM used:   9 (0%) at main() level
                           24 (1%) worst case
               Stack used: 4 locations
               Stack size: 31

*
0000:  GOTO   0312
.................... #import(file="main.o")
.................... #define LCD_ENABLE_PIN PIN_D2
.................... #define LCD_ENABLE_PIN PIN_D2
.................... #define LCD_RS_PIN PIN_D0
.................... #define LCD_RW_PIN PIN_D1
.................... #define LCD_DATA4 PIN_D4
.................... #define LCD_DATA5 PIN_D5
.................... #define LCD_DATA6 PIN_D6
.................... #define LCD_DATA7 PIN_D7
.................... #include <main.h>
.................... #include <18F4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
0004:  DATA 20,67
0006:  DATA 6F,6E
0008:  DATA 65,20
000A:  DATA 74,6F
000C:  DATA 6F,20
000E:  DATA 66,61
0010:  DATA 72,00
0012:  DATA 73,77
0014:  DATA 74,5F
0016:  DATA 77,61
0018:  DATA 79,20
001A:  DATA 3D,20
001C:  DATA 25,78
001E:  DATA 00,00
*
0256:  TBLRD*+
0258:  MOVFF  FF6,0B
025C:  MOVFF  FF7,0C
0260:  MOVFF  FF5,0D
0264:  RCALL  0206
0266:  MOVFF  0B,FF6
026A:  MOVFF  0C,FF7
026E:  DECFSZ 0A,F
0270:  BRA    0256
0272:  GOTO   02E2 (RETURN)
0276:  BTFSC  0B.7
0278:  BRA    0298
027A:  MOVLW  0F
027C:  MOVWF  00
027E:  SWAPF  0A,W
0280:  ANDWF  00,F
0282:  MOVLW  0A
0284:  SUBWF  00,W
0286:  BC    028E
0288:  MOVLW  30
028A:  ADDWF  00,F
028C:  BRA    0292
028E:  MOVF   0B,W
0290:  ADDWF  00,F
0292:  MOVFF  00,0D
0296:  RCALL  0206
0298:  MOVLW  0F
029A:  ANDWF  0A,F
029C:  MOVLW  0A
029E:  SUBWF  0A,W
02A0:  BC    02A6
02A2:  MOVLW  30
02A4:  BRA    02AA
02A6:  BCF    0B.7
02A8:  MOVF   0B,W
02AA:  ADDWF  0A,F
02AC:  MOVFF  0A,0D
02B0:  RCALL  0206
02B2:  GOTO   02EC (RETURN)
*
02F0:  TBLRD*+
02F2:  MOVF   FF5,F
02F4:  BZ    030E
02F6:  MOVFF  FF6,09
02FA:  MOVFF  FF7,0A
02FE:  MOVFF  FF5,0D
0302:  RCALL  0206
0304:  MOVFF  09,FF6
0308:  MOVFF  0A,FF7
030C:  BRA    02F0
030E:  GOTO   038C (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=8
.................... 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled
.................... #FUSES PUT                   	//Power Up Timer
.................... #FUSES BROWNOUT              	//Reset when brownout detected
.................... #FUSES BORV28                	//Brownout reset at 2.7V
.................... #FUSES NOVREGEN              	//USB voltage regulator disabled
.................... #FUSES NOPBADEN              	//PORTB pins are configured as digital I/O on RESET
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O
.................... #FUSES STVREN                	//Stack full/underflow will cause reset
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES NOPROTECT             	//Code not protected from reading
.................... #FUSES NOCPB                 	//No Boot Block code protection
.................... #FUSES NOCPD                 	//No EE protection
.................... #FUSES NOWRT                 	//Program memory not write protected
.................... #FUSES NOWRTC                	//Configuration registers not write protected
.................... #FUSES NOWRTB                	//Boot block not write protected
.................... #FUSES NOWRTD                	//Data EEPROM not write protected
.................... #FUSES NOEBTR                	//Memory not protected from table reads
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads
.................... 
.................... #use delay(internal=8MHz)
*
0020:  CLRF   FEA
0022:  MOVLW  0E
0024:  MOVWF  FE9
0026:  MOVF   FEF,W
0028:  BZ    0044
002A:  MOVLW  02
002C:  MOVWF  01
002E:  CLRF   00
0030:  DECFSZ 00,F
0032:  BRA    0030
0034:  DECFSZ 01,F
0036:  BRA    002E
0038:  MOVLW  97
003A:  MOVWF  00
003C:  DECFSZ 00,F
003E:  BRA    003C
0040:  DECFSZ FEF,F
0042:  BRA    002A
0044:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1,errors)
.................... 
.................... #define LED PIN_B3
.................... #define DELAY 500
.................... 
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00D8:  BSF    F95.4
....................    output_float(LCD_DATA5);
00DA:  BSF    F95.5
....................    output_float(LCD_DATA6);
00DC:  BSF    F95.6
....................    output_float(LCD_DATA7);
00DE:  BSF    F95.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00E0:  BSF    F8C.1
00E2:  BCF    F95.1
....................    delay_cycles(1);
00E4:  NOP   
....................    lcd_output_enable(1);
00E6:  BSF    F8C.2
00E8:  BCF    F95.2
....................    delay_cycles(1);
00EA:  NOP   
....................    high = lcd_read_nibble();
00EC:  RCALL  0086
00EE:  MOVFF  01,15
....................       
....................    lcd_output_enable(0);
00F2:  BCF    F8C.2
00F4:  BCF    F95.2
....................    delay_cycles(1);
00F6:  NOP   
....................    lcd_output_enable(1);
00F8:  BSF    F8C.2
00FA:  BCF    F95.2
....................    delay_us(1);
00FC:  BRA    00FE
....................    low = lcd_read_nibble();
00FE:  RCALL  0086
0100:  MOVFF  01,14
....................       
....................    lcd_output_enable(0);
0104:  BCF    F8C.2
0106:  BCF    F95.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0108:  BCF    F95.4
....................    output_drive(LCD_DATA5);
010A:  BCF    F95.5
....................    output_drive(LCD_DATA6);
010C:  BCF    F95.6
....................    output_drive(LCD_DATA7);
010E:  BCF    F95.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0110:  SWAPF  15,W
0112:  MOVWF  00
0114:  MOVLW  F0
0116:  ANDWF  00,F
0118:  MOVF   00,W
011A:  IORWF  14,W
011C:  MOVWF  01
011E:  GOTO   012E (RETURN)
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0086:  CLRF   16
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0088:  BSF    F95.4
008A:  MOVLW  00
008C:  BTFSC  F83.4
008E:  MOVLW  01
0090:  IORWF  16,F
....................    n |= input(LCD_DATA5) << 1;
0092:  BSF    F95.5
0094:  MOVLW  00
0096:  BTFSC  F83.5
0098:  MOVLW  01
009A:  MOVWF  00
009C:  BCF    FD8.0
009E:  RLCF   00,F
00A0:  MOVF   00,W
00A2:  IORWF  16,F
....................    n |= input(LCD_DATA6) << 2;
00A4:  BSF    F95.6
00A6:  MOVLW  00
00A8:  BTFSC  F83.6
00AA:  MOVLW  01
00AC:  MOVWF  00
00AE:  RLCF   00,F
00B0:  RLCF   00,F
00B2:  MOVLW  FC
00B4:  ANDWF  00,F
00B6:  MOVF   00,W
00B8:  IORWF  16,F
....................    n |= input(LCD_DATA7) << 3;
00BA:  BSF    F95.7
00BC:  MOVLW  00
00BE:  BTFSC  F83.7
00C0:  MOVLW  01
00C2:  MOVWF  00
00C4:  RLCF   00,F
00C6:  RLCF   00,F
00C8:  RLCF   00,F
00CA:  MOVLW  F8
00CC:  ANDWF  00,F
00CE:  MOVF   00,W
00D0:  IORWF  16,F
....................    
....................    return(n);
00D2:  MOVFF  16,01
....................   #else
00D6:  RETURN 0
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0046:  BTFSC  15.0
0048:  BRA    004E
004A:  BCF    F8C.4
004C:  BRA    0050
004E:  BSF    F8C.4
0050:  BCF    F95.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0052:  BTFSC  15.1
0054:  BRA    005A
0056:  BCF    F8C.5
0058:  BRA    005C
005A:  BSF    F8C.5
005C:  BCF    F95.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
005E:  BTFSC  15.2
0060:  BRA    0066
0062:  BCF    F8C.6
0064:  BRA    0068
0066:  BSF    F8C.6
0068:  BCF    F95.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
006A:  BTFSC  15.3
006C:  BRA    0072
006E:  BCF    F8C.7
0070:  BRA    0074
0072:  BSF    F8C.7
0074:  BCF    F95.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0076:  NOP   
....................    lcd_output_enable(1);
0078:  BSF    F8C.2
007A:  BCF    F95.2
....................    delay_us(2);
007C:  BRA    007E
007E:  BRA    0080
....................    lcd_output_enable(0);
0080:  BCF    F8C.2
0082:  BCF    F95.2
0084:  RETURN 0
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0122:  BCF    F95.2
....................    lcd_rs_tris();
0124:  BCF    F95.0
....................    lcd_rw_tris();
0126:  BCF    F95.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
0128:  BCF    F8C.0
012A:  BCF    F95.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
012C:  BRA    00D8
012E:  MOVFF  01,14
0132:  BTFSC  01.7
0134:  BRA    012C
....................    lcd_output_rs(address);
0136:  MOVF   12,F
0138:  BNZ   013E
013A:  BCF    F8C.0
013C:  BRA    0140
013E:  BSF    F8C.0
0140:  BCF    F95.0
....................    delay_cycles(1);
0142:  NOP   
....................    lcd_output_rw(0);
0144:  BCF    F8C.1
0146:  BCF    F95.1
....................    delay_cycles(1);
0148:  NOP   
....................    lcd_output_enable(0);
014A:  BCF    F8C.2
014C:  BCF    F95.2
....................    lcd_send_nibble(n >> 4);
014E:  SWAPF  13,W
0150:  MOVWF  14
0152:  MOVLW  0F
0154:  ANDWF  14,F
0156:  MOVFF  14,15
015A:  RCALL  0046
....................    lcd_send_nibble(n & 0xf);
015C:  MOVF   13,W
015E:  ANDLW  0F
0160:  MOVWF  14
0162:  MOVWF  15
0164:  RCALL  0046
0166:  RETURN 0
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0168:  MOVLW  28
016A:  MOVWF  0A
016C:  MOVLW  0C
016E:  MOVWF  0B
0170:  MOVLW  01
0172:  MOVWF  0C
0174:  MOVLW  06
0176:  MOVWF  0D
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0178:  BCF    F8C.2
017A:  BCF    F95.2
....................    lcd_output_rs(0);
017C:  BCF    F8C.0
017E:  BCF    F95.0
....................    lcd_output_rw(0);
0180:  BCF    F8C.1
0182:  BCF    F95.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0184:  BCF    F95.4
....................    output_drive(LCD_DATA5);
0186:  BCF    F95.5
....................    output_drive(LCD_DATA6);
0188:  BCF    F95.6
....................    output_drive(LCD_DATA7);
018A:  BCF    F95.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
018C:  BCF    F95.2
....................    lcd_rs_tris();
018E:  BCF    F95.0
....................    lcd_rw_tris();
0190:  BCF    F95.1
....................  #endif
....................     
....................    delay_ms(15);
0192:  MOVLW  0F
0194:  MOVWF  0E
0196:  RCALL  0020
....................    for(i=1;i<=3;++i)
0198:  MOVLW  01
019A:  MOVWF  09
019C:  MOVF   09,W
019E:  SUBLW  03
01A0:  BNC   01B2
....................    {
....................        lcd_send_nibble(3);
01A2:  MOVLW  03
01A4:  MOVWF  15
01A6:  RCALL  0046
....................        delay_ms(5);
01A8:  MOVLW  05
01AA:  MOVWF  0E
01AC:  RCALL  0020
01AE:  INCF   09,F
01B0:  BRA    019C
....................    }
....................    
....................    lcd_send_nibble(2);
01B2:  MOVLW  02
01B4:  MOVWF  15
01B6:  RCALL  0046
....................    delay_ms(5);
01B8:  MOVLW  05
01BA:  MOVWF  0E
01BC:  RCALL  0020
....................    for(i=0;i<=3;++i)
01BE:  CLRF   09
01C0:  MOVF   09,W
01C2:  SUBLW  03
01C4:  BNC   01E0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
01C6:  CLRF   03
01C8:  MOVF   09,W
01CA:  ADDLW  0A
01CC:  MOVWF  FE9
01CE:  MOVLW  00
01D0:  ADDWFC 03,W
01D2:  MOVWF  FEA
01D4:  MOVFF  FEF,13
01D8:  CLRF   12
01DA:  RCALL  0122
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01DC:  INCF   09,F
01DE:  BRA    01C0
01E0:  GOTO   0342 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
01E4:  DECFSZ 0F,W
01E6:  BRA    01EA
01E8:  BRA    01F0
....................       address=LCD_LINE_TWO;
01EA:  MOVLW  40
01EC:  MOVWF  10
01EE:  BRA    01F2
....................    else
....................       address=0;
01F0:  CLRF   10
....................      
....................    address+=x-1;
01F2:  MOVLW  01
01F4:  SUBWF  0E,W
01F6:  ADDWF  10,F
....................    lcd_send_byte(0,0x80|address);
01F8:  MOVF   10,W
01FA:  IORLW  80
01FC:  MOVWF  11
01FE:  CLRF   12
0200:  MOVWF  13
0202:  RCALL  0122
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0204:  RETURN 0
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0206:  MOVF   0D,W
0208:  XORLW  07
020A:  BZ    021A
020C:  XORLW  0B
020E:  BZ    0224
0210:  XORLW  06
0212:  BZ    0234
0214:  XORLW  02
0216:  BZ    0240
0218:  BRA    024A
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
021A:  MOVLW  01
021C:  MOVWF  0E
021E:  MOVWF  0F
0220:  RCALL  01E4
0222:  BRA    0254
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0224:  CLRF   12
0226:  MOVLW  01
0228:  MOVWF  13
022A:  RCALL  0122
....................                      delay_ms(2);
022C:  MOVLW  02
022E:  MOVWF  0E
0230:  RCALL  0020
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0232:  BRA    0254
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0234:  MOVLW  01
0236:  MOVWF  0E
0238:  MOVLW  02
023A:  MOVWF  0F
023C:  RCALL  01E4
023E:  BRA    0254
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0240:  CLRF   12
0242:  MOVLW  10
0244:  MOVWF  13
0246:  RCALL  0122
0248:  BRA    0254
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
024A:  MOVLW  01
024C:  MOVWF  12
024E:  MOVFF  0D,13
0252:  RCALL  0122
....................      #endif
....................    }
0254:  RETURN 0
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int swt_way = 0;
.................... 
.................... void read_switch(void);
.................... 
.................... void main() {
*
0312:  CLRF   FF8
0314:  BCF    FD0.7
0316:  MOVLW  70
0318:  MOVWF  FD3
031A:  MOVF   FD3,W
031C:  CLRF   04
031E:  BCF    FB8.3
0320:  MOVLW  0C
0322:  MOVWF  FAF
0324:  MOVLW  A2
0326:  MOVWF  FAC
0328:  MOVLW  90
032A:  MOVWF  FAB
032C:  CLRF   05
032E:  CLRF   07
0330:  CLRF   06
0332:  MOVF   FC1,W
0334:  ANDLW  C0
0336:  IORLW  0F
0338:  MOVWF  FC1
033A:  MOVLW  07
033C:  MOVWF  FB4
033E:  CLRF   08
....................    unsigned int q = 0;
.................... 
....................    lcd_init();
0340:  BRA    0168
.................... 
....................    while(TRUE) {
....................       read_switch();
0342:  BRA    02B6
....................       switch(swt_way) {
0344:  MOVF   05,W
0346:  XORLW  01
0348:  BZ    0358
034A:  XORLW  03
034C:  BZ    0362
034E:  XORLW  06
0350:  BZ    036C
0352:  XORLW  0C
0354:  BZ    0376
0356:  BRA    038C
.................... 	 
....................       // clockwise motor rotation	 
.................... 	 case 1:  output_high(PIN_C0);
0358:  BCF    F94.0
035A:  BSF    F8B.0
.................... 		  output_low(PIN_C1);
035C:  BCF    F94.1
035E:  BCF    F8B.1
.................... 		  break;
0360:  BRA    038C
.................... 	 
....................       // anti-clockwise motor rotation	 
.................... 	 case 2:  output_low(PIN_C0);
0362:  BCF    F94.0
0364:  BCF    F8B.0
.................... 		  output_high(PIN_C1);
0366:  BCF    F94.1
0368:  BSF    F8B.1
.................... 		  break;
036A:  BRA    038C
.................... 	 
.................... 	 case 4:  output_low(PIN_C0);
036C:  BCF    F94.0
036E:  BCF    F8B.0
.................... 		  output_low(PIN_C1);
0370:  BCF    F94.1
0372:  BCF    F8B.1
.................... 		  break;
0374:  BRA    038C
.................... 	 
.................... 	 case 8:  lcd_gotoxy(1, 3);
0376:  MOVLW  01
0378:  MOVWF  0E
037A:  MOVLW  03
037C:  MOVWF  0F
037E:  RCALL  01E4
.................... 		  printf(lcd_putc, " gone too far");
0380:  MOVLW  04
0382:  MOVWF  FF6
0384:  MOVLW  00
0386:  MOVWF  FF7
0388:  BRA    02F0
.................... 		  break;
038A:  BRA    038C
.................... 	 
.................... 	 
.................... 	 default: break;
....................       }
038C:  BRA    0342
....................    }
.................... 
.................... }
.................... 
038E:  SLEEP 
.................... 
.................... void read_switch(void) {
*
02B6:  CLRF   09
....................    unsigned int swt = 0;
....................    
....................    swt = input_b();		// get the value of port B into swt
02B8:  SETF   F93
02BA:  MOVFF  F81,09
....................    swt = swt & 0xf0;		// mask off the unwanted bits
02BE:  MOVLW  F0
02C0:  ANDWF  09,F
....................    swt /= 16;			// divide the answer by 16
02C2:  SWAPF  09,F
02C4:  MOVLW  0F
02C6:  ANDWF  09,F
....................    
....................    swt_way = swt;
02C8:  MOVFF  09,05
....................    lcd_gotoxy(1, 1);
02CC:  MOVLW  01
02CE:  MOVWF  0E
02D0:  MOVWF  0F
02D2:  RCALL  01E4
....................    printf(lcd_putc, "swt_way = %x", swt_way);
02D4:  MOVLW  12
02D6:  MOVWF  FF6
02D8:  MOVLW  00
02DA:  MOVWF  FF7
02DC:  MOVLW  0A
02DE:  MOVWF  0A
02E0:  BRA    0256
02E2:  MOVFF  05,0A
02E6:  MOVLW  57
02E8:  MOVWF  0B
02EA:  BRA    0276
02EC:  GOTO   0344 (RETURN)
.................... }
.................... 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E16   PUT BROWNOUT BORV28 NOVREGEN NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
