CCS PCH C Compiler, Version 5.048, 26145               07-Feb-24 14:23

               Filename:   C:\Users\soac-gj2\Desktop\embedded C 2024\project5\proteus\PIC18F45K50_1\Debug.lst

               ROM used:   1970 bytes (6%)
                           Largest free fragment is 30798
               RAM used:   17 (1%) at main() level
                           46 (2%) worst case
               Stack used: 5 locations
               Stack size: 31

*
0000:  GOTO   06F8
.................... #import(file="main.o") 
....................  
.................... #include <main.h> 
.................... #include <18F45k50.h> 
.................... //////////// Standard Header file for the PIC18F45K50 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F45K50 
0004:  DATA 0C,4D
0006:  DATA 6F,74
0008:  DATA 6F,72
000A:  DATA 20,41
000C:  DATA 6E,74
000E:  DATA 69,2D
0010:  DATA 63,6C
0012:  DATA 6F,63
0014:  DATA 6B,77
0016:  DATA 69,73
0018:  DATA 65,00
001A:  DATA 0C,4D
001C:  DATA 6F,74
001E:  DATA 6F,72
0020:  DATA 20,43
0022:  DATA 6C,6F
0024:  DATA 63,6B
0026:  DATA 77,69
0028:  DATA 73,65
002A:  DATA 00,00
002C:  DATA 0C,66
002E:  DATA 6C,61
0030:  DATA 73,68
0032:  DATA 20,64
0034:  DATA 75,61
0036:  DATA 6C,20
0038:  DATA 63,6F
003A:  DATA 6C,6F
003C:  DATA 75,72
003E:  DATA 00,00
0040:  DATA 6C,65
0042:  DATA 64,73
0044:  DATA 20,00
0046:  DATA 0C,76
0048:  DATA 61,6C
004A:  DATA 75,65
004C:  DATA 73,20
004E:  DATA 6F,66
0050:  DATA 20,61
0052:  DATA 64,63
0054:  DATA 20,00
0056:  DATA 20,20
0058:  DATA 20,25
005A:  DATA 33,75
005C:  DATA 20,20
005E:  DATA 20,20
0060:  DATA 25,33
0062:  DATA 75,20
0064:  DATA 20,20
0066:  DATA 25,33
0068:  DATA 75,00
006A:  DATA 20,73
006C:  DATA 75,6D
006E:  DATA 20,3D
0070:  DATA 20,25
0072:  DATA 6C,75
0074:  DATA 00,00
0076:  DATA 0C,4B
0078:  DATA 6E,69
007A:  DATA 67,68
007C:  DATA 74,20
007E:  DATA 52,69
0080:  DATA 64,65
0082:  DATA 72,20
0084:  DATA 00,00
0086:  DATA 0C,73
0088:  DATA 6F,75
008A:  DATA 6E,64
008C:  DATA 65,72
008E:  DATA 20,2D
0090:  DATA 20,6F
0092:  DATA 6E,20
0094:  DATA 00,00
*
0310:  TBLRD*+
0312:  MOVF   FF5,F
0314:  BZ    032E
0316:  MOVFF  FF6,21
031A:  MOVFF  FF7,22
031E:  MOVFF  FF5,23
0322:  RCALL  02A2
0324:  MOVFF  21,FF6
0328:  MOVFF  22,FF7
032C:  BRA    0310
032E:  RETURN 0
*
03F0:  TBLRD*+
03F2:  MOVFF  FF6,14
03F6:  MOVFF  FF7,15
03FA:  MOVFF  FF5,23
03FE:  RCALL  02A2
0400:  MOVFF  14,FF6
0404:  MOVFF  15,FF7
0408:  DECFSZ 13,F
040A:  BRA    03F0
040C:  RETURN 0
040E:  MOVF   14,W
0410:  CLRF   01
0412:  SUBWF  13,W
0414:  BC    041C
0416:  MOVFF  13,00
041A:  BRA    0434
041C:  CLRF   00
041E:  MOVLW  08
0420:  MOVWF  15
0422:  RLCF   13,F
0424:  RLCF   00,F
0426:  MOVF   14,W
0428:  SUBWF  00,W
042A:  BTFSC  FD8.0
042C:  MOVWF  00
042E:  RLCF   01,F
0430:  DECFSZ 15,F
0432:  BRA    0422
0434:  RETURN 0
0436:  MOVF   01,W
0438:  MOVFF  11,13
043C:  MOVLW  64
043E:  MOVWF  14
0440:  RCALL  040E
0442:  MOVFF  00,11
0446:  MOVF   01,W
0448:  MOVLW  30
044A:  BNZ   045A
044C:  BTFSS  12.1
044E:  BRA    0468
0450:  BTFSC  12.3
0452:  BRA    0468
0454:  BTFSC  12.4
0456:  MOVLW  20
0458:  BRA    0460
045A:  BCF    12.3
045C:  BCF    12.4
045E:  BSF    12.0
0460:  ADDWF  01,F
0462:  MOVFF  01,23
0466:  RCALL  02A2
0468:  MOVFF  11,13
046C:  MOVLW  0A
046E:  MOVWF  14
0470:  RCALL  040E
0472:  MOVFF  00,11
0476:  MOVF   01,W
0478:  MOVLW  30
047A:  BNZ   0488
047C:  BTFSC  12.3
047E:  BRA    0490
0480:  BTFSS  12.0
0482:  BRA    0490
0484:  BTFSC  12.4
0486:  MOVLW  20
0488:  ADDWF  01,F
048A:  MOVFF  01,23
048E:  RCALL  02A2
0490:  MOVLW  30
0492:  ADDWF  11,F
0494:  MOVFF  11,23
0498:  RCALL  02A2
049A:  RETURN 0
*
04BE:  MOVFF  FEA,1B
04C2:  MOVFF  FE9,1A
04C6:  SWAPF  14,W
04C8:  IORLW  F0
04CA:  MOVWF  16
04CC:  ADDWF  16,F
04CE:  ADDLW  E2
04D0:  MOVWF  17
04D2:  ADDLW  32
04D4:  MOVWF  19
04D6:  MOVF   14,W
04D8:  ANDLW  0F
04DA:  ADDWF  17,F
04DC:  ADDWF  17,F
04DE:  ADDWF  19,F
04E0:  ADDLW  E9
04E2:  MOVWF  18
04E4:  ADDWF  18,F
04E6:  ADDWF  18,F
04E8:  SWAPF  13,W
04EA:  ANDLW  0F
04EC:  ADDWF  18,F
04EE:  ADDWF  19,F
04F0:  RLCF   18,F
04F2:  RLCF   19,F
04F4:  COMF   19,F
04F6:  RLCF   19,F
04F8:  MOVF   13,W
04FA:  ANDLW  0F
04FC:  ADDWF  19,F
04FE:  RLCF   16,F
0500:  MOVLW  07
0502:  MOVWF  15
0504:  MOVLW  0A
0506:  DECF   18,F
0508:  ADDWF  19,F
050A:  BNC   0506
050C:  DECF   17,F
050E:  ADDWF  18,F
0510:  BNC   050C
0512:  DECF   16,F
0514:  ADDWF  17,F
0516:  BNC   0512
0518:  DECF   15,F
051A:  ADDWF  16,F
051C:  BNC   0518
051E:  CLRF   FEA
0520:  MOVLW  15
0522:  MOVWF  FE9
0524:  MOVLW  07
0526:  ANDWF  1A,W
0528:  BCF    1A.6
052A:  ADDWF  FE9,F
052C:  MOVLW  00
052E:  ADDWFC FEA,F
0530:  MOVF   FE9,W
0532:  SUBLW  19
0534:  BNZ   053C
0536:  MOVF   FEA,F
0538:  BNZ   053C
053A:  BSF    1A.6
053C:  MOVF   FEF,W
053E:  MOVWF  00
0540:  BNZ   0552
0542:  BTFSC  1A.6
0544:  BRA    0552
0546:  BTFSC  1A.4
0548:  BRA    0570
054A:  BTFSC  1A.3
054C:  BRA    0552
054E:  MOVLW  20
0550:  BRA    0558
0552:  BSF    1A.3
0554:  BCF    1A.4
0556:  MOVLW  30
0558:  ADDWF  00,F
055A:  MOVFF  FEA,14
055E:  MOVFF  FE9,13
0562:  MOVFF  00,23
0566:  RCALL  02A2
0568:  MOVFF  14,FEA
056C:  MOVFF  13,FE9
0570:  MOVF   FEE,W
0572:  BTFSS  1A.6
0574:  BRA    0530
0576:  GOTO   0634 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV22                	//Brownout reset at 2.2V 
.................... #FUSES NOPBADEN              	//PORTB pins are configured as digital I/O on RESET 
.................... //#FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... //#FUSES HFOFST                	//High Frequency INTRC starts clocking CPU immediately 
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTC                	//Configuration registers not write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
....................  
.................... #use delay(internal=16MHz) 
*
0096:  CLRF   FEA
0098:  MOVLW  24
009A:  MOVWF  FE9
009C:  MOVF   FEF,W
009E:  BZ    00BC
00A0:  MOVLW  05
00A2:  MOVWF  01
00A4:  CLRF   00
00A6:  DECFSZ 00,F
00A8:  BRA    00A6
00AA:  DECFSZ 01,F
00AC:  BRA    00A4
00AE:  MOVLW  2E
00B0:  MOVWF  00
00B2:  DECFSZ 00,F
00B4:  BRA    00B2
00B6:  BRA    00B8
00B8:  DECFSZ FEF,F
00BA:  BRA    00A0
00BC:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1,errors) 
....................  
.................... #define LED PIN_B7 
.................... #define DELAY 500 
....................  
.................... #define LCD_ENABLE_PIN PIN_d2 
.................... #define LCD_RS_PIN PIN_d0 
.................... #define LCD_RW_PIN PIN_d1 
.................... #define LCD_DATA4 PIN_d4 
.................... #define LCD_DATA5 PIN_d5 
.................... #define LCD_DATA6 PIN_d6 
.................... #define LCD_DATA7 PIN_d7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0156:  BSF    F95.4
....................    output_float(LCD_DATA5); 
0158:  BSF    F95.5
....................    output_float(LCD_DATA6); 
015A:  BSF    F95.6
....................    output_float(LCD_DATA7); 
015C:  BSF    F95.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
015E:  BSF    F8C.1
0160:  BCF    F95.1
....................    delay_cycles(1); 
0162:  NOP   
....................    lcd_output_enable(1); 
0164:  BSF    F8C.2
0166:  BCF    F95.2
....................    delay_cycles(1); 
0168:  NOP   
....................    high = lcd_read_nibble(); 
016A:  RCALL  0104
016C:  MOVFF  01,2B
....................        
....................    lcd_output_enable(0); 
0170:  BCF    F8C.2
0172:  BCF    F95.2
....................    delay_cycles(1); 
0174:  NOP   
....................    lcd_output_enable(1); 
0176:  BSF    F8C.2
0178:  BCF    F95.2
....................    delay_us(1); 
017A:  BRA    017C
017C:  BRA    017E
....................    low = lcd_read_nibble(); 
017E:  RCALL  0104
0180:  MOVFF  01,2A
....................        
....................    lcd_output_enable(0); 
0184:  BCF    F8C.2
0186:  BCF    F95.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0188:  BCF    F95.4
....................    output_drive(LCD_DATA5); 
018A:  BCF    F95.5
....................    output_drive(LCD_DATA6); 
018C:  BCF    F95.6
....................    output_drive(LCD_DATA7); 
018E:  BCF    F95.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0190:  SWAPF  2B,W
0192:  MOVWF  00
0194:  MOVLW  F0
0196:  ANDWF  00,F
0198:  MOVF   00,W
019A:  IORWF  2A,W
019C:  MOVWF  01
019E:  GOTO   01AE (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0104:  CLRF   2C
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0106:  BSF    F95.4
0108:  MOVLW  00
010A:  BTFSC  F83.4
010C:  MOVLW  01
010E:  IORWF  2C,F
....................    n |= input(LCD_DATA5) << 1; 
0110:  BSF    F95.5
0112:  MOVLW  00
0114:  BTFSC  F83.5
0116:  MOVLW  01
0118:  MOVWF  00
011A:  BCF    FD8.0
011C:  RLCF   00,F
011E:  MOVF   00,W
0120:  IORWF  2C,F
....................    n |= input(LCD_DATA6) << 2; 
0122:  BSF    F95.6
0124:  MOVLW  00
0126:  BTFSC  F83.6
0128:  MOVLW  01
012A:  MOVWF  00
012C:  RLCF   00,F
012E:  RLCF   00,F
0130:  MOVLW  FC
0132:  ANDWF  00,F
0134:  MOVF   00,W
0136:  IORWF  2C,F
....................    n |= input(LCD_DATA7) << 3; 
0138:  BSF    F95.7
013A:  MOVLW  00
013C:  BTFSC  F83.7
013E:  MOVLW  01
0140:  MOVWF  00
0142:  RLCF   00,F
0144:  RLCF   00,F
0146:  RLCF   00,F
0148:  MOVLW  F8
014A:  ANDWF  00,F
014C:  MOVF   00,W
014E:  IORWF  2C,F
....................     
....................    return(n); 
0150:  MOVFF  2C,01
....................   #else 
0154:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00BE:  BTFSC  2B.0
00C0:  BRA    00C6
00C2:  BCF    F8C.4
00C4:  BRA    00C8
00C6:  BSF    F8C.4
00C8:  BCF    F95.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00CA:  BTFSC  2B.1
00CC:  BRA    00D2
00CE:  BCF    F8C.5
00D0:  BRA    00D4
00D2:  BSF    F8C.5
00D4:  BCF    F95.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00D6:  BTFSC  2B.2
00D8:  BRA    00DE
00DA:  BCF    F8C.6
00DC:  BRA    00E0
00DE:  BSF    F8C.6
00E0:  BCF    F95.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00E2:  BTFSC  2B.3
00E4:  BRA    00EA
00E6:  BCF    F8C.7
00E8:  BRA    00EC
00EA:  BSF    F8C.7
00EC:  BCF    F95.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00EE:  NOP   
....................    lcd_output_enable(1); 
00F0:  BSF    F8C.2
00F2:  BCF    F95.2
....................    delay_us(2); 
00F4:  MOVLW  02
00F6:  MOVWF  00
00F8:  DECFSZ 00,F
00FA:  BRA    00F8
00FC:  NOP   
....................    lcd_output_enable(0); 
00FE:  BCF    F8C.2
0100:  BCF    F95.2
0102:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
01A2:  BCF    F95.2
....................    lcd_rs_tris(); 
01A4:  BCF    F95.0
....................    lcd_rw_tris(); 
01A6:  BCF    F95.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
01A8:  BCF    F8C.0
01AA:  BCF    F95.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
01AC:  BRA    0156
01AE:  MOVFF  01,2A
01B2:  BTFSC  01.7
01B4:  BRA    01AC
....................    lcd_output_rs(address); 
01B6:  MOVF   28,F
01B8:  BNZ   01BE
01BA:  BCF    F8C.0
01BC:  BRA    01C0
01BE:  BSF    F8C.0
01C0:  BCF    F95.0
....................    delay_cycles(1); 
01C2:  NOP   
....................    lcd_output_rw(0); 
01C4:  BCF    F8C.1
01C6:  BCF    F95.1
....................    delay_cycles(1); 
01C8:  NOP   
....................    lcd_output_enable(0); 
01CA:  BCF    F8C.2
01CC:  BCF    F95.2
....................    lcd_send_nibble(n >> 4); 
01CE:  SWAPF  29,W
01D0:  MOVWF  2A
01D2:  MOVLW  0F
01D4:  ANDWF  2A,F
01D6:  MOVFF  2A,2B
01DA:  RCALL  00BE
....................    lcd_send_nibble(n & 0xf); 
01DC:  MOVF   29,W
01DE:  ANDLW  0F
01E0:  MOVWF  2A
01E2:  MOVWF  2B
01E4:  RCALL  00BE
01E6:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01E8:  MOVLW  28
01EA:  MOVWF  12
01EC:  MOVLW  0C
01EE:  MOVWF  13
01F0:  MOVLW  01
01F2:  MOVWF  14
01F4:  MOVLW  06
01F6:  MOVWF  15
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01F8:  BCF    F8C.2
01FA:  BCF    F95.2
....................    lcd_output_rs(0); 
01FC:  BCF    F8C.0
01FE:  BCF    F95.0
....................    lcd_output_rw(0); 
0200:  BCF    F8C.1
0202:  BCF    F95.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0204:  BCF    F95.4
....................    output_drive(LCD_DATA5); 
0206:  BCF    F95.5
....................    output_drive(LCD_DATA6); 
0208:  BCF    F95.6
....................    output_drive(LCD_DATA7); 
020A:  BCF    F95.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
020C:  BCF    F95.2
....................    lcd_rs_tris(); 
020E:  BCF    F95.0
....................    lcd_rw_tris(); 
0210:  BCF    F95.1
....................  #endif 
....................      
....................    delay_ms(15); 
0212:  MOVLW  0F
0214:  MOVWF  24
0216:  RCALL  0096
....................    for(i=1;i<=3;++i) 
0218:  MOVLW  01
021A:  MOVWF  11
021C:  MOVF   11,W
021E:  SUBLW  03
0220:  BNC   0232
....................    { 
....................        lcd_send_nibble(3); 
0222:  MOVLW  03
0224:  MOVWF  2B
0226:  RCALL  00BE
....................        delay_ms(5); 
0228:  MOVLW  05
022A:  MOVWF  24
022C:  RCALL  0096
022E:  INCF   11,F
0230:  BRA    021C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0232:  MOVLW  02
0234:  MOVWF  2B
0236:  RCALL  00BE
....................    delay_ms(5); 
0238:  MOVLW  05
023A:  MOVWF  24
023C:  RCALL  0096
....................    for(i=0;i<=3;++i) 
023E:  CLRF   11
0240:  MOVF   11,W
0242:  SUBLW  03
0244:  BNC   0260
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0246:  CLRF   03
0248:  MOVF   11,W
024A:  ADDLW  12
024C:  MOVWF  FE9
024E:  MOVLW  00
0250:  ADDWFC 03,W
0252:  MOVWF  FEA
0254:  MOVFF  FEF,29
0258:  CLRF   28
025A:  RCALL  01A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
025C:  INCF   11,F
025E:  BRA    0240
0260:  GOTO   0768 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0280:  DECFSZ 25,W
0282:  BRA    0286
0284:  BRA    028C
....................       address=LCD_LINE_TWO; 
0286:  MOVLW  40
0288:  MOVWF  26
028A:  BRA    028E
....................    else 
....................       address=0; 
028C:  CLRF   26
....................       
....................    address+=x-1; 
028E:  MOVLW  01
0290:  SUBWF  24,W
0292:  ADDWF  26,F
....................    lcd_send_byte(0,0x80|address); 
0294:  MOVF   26,W
0296:  IORLW  80
0298:  MOVWF  27
029A:  CLRF   28
029C:  MOVWF  29
029E:  RCALL  01A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02A0:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02A2:  MOVF   23,W
02A4:  XORLW  07
02A6:  BZ    02B6
02A8:  XORLW  0B
02AA:  BZ    02C0
02AC:  XORLW  06
02AE:  BZ    02D0
02B0:  XORLW  02
02B2:  BZ    02DC
02B4:  BRA    02E6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02B6:  MOVLW  01
02B8:  MOVWF  24
02BA:  MOVWF  25
02BC:  RCALL  0280
02BE:  BRA    02F0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02C0:  CLRF   28
02C2:  MOVLW  01
02C4:  MOVWF  29
02C6:  RCALL  01A2
....................                      delay_ms(2); 
02C8:  MOVLW  02
02CA:  MOVWF  24
02CC:  RCALL  0096
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02CE:  BRA    02F0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02D0:  MOVLW  01
02D2:  MOVWF  24
02D4:  MOVLW  02
02D6:  MOVWF  25
02D8:  RCALL  0280
02DA:  BRA    02F0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02DC:  CLRF   28
02DE:  MOVLW  10
02E0:  MOVWF  29
02E2:  RCALL  01A2
02E4:  BRA    02F0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02E6:  MOVLW  01
02E8:  MOVWF  28
02EA:  MOVFF  23,29
02EE:  RCALL  01A2
....................      #endif 
....................    } 
02F0:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... /********************************* globals ************************/ 
....................  
.................... unsigned int switches; 
.................... unsigned int rout1=0,rout2=0,rout3=0,rout4=0; 
....................  
.................... unsigned int ops,old_ops; 
.................... unsigned int adc0,adc1,adc2; 
....................  
.................... /********************************* globals ************************/ 
....................  
....................  
.................... unsigned long routine1(unsigned int, unsigned int, unsigned int); 
.................... unsigned int read_pot(unsigned int); 
.................... unsigned int read_buts(void); 
.................... void clear_outputs(void); 
.................... void operation1(void); 
.................... void operation2(void); 
.................... void operation3(void); 
.................... void operation4(void); 
.................... void operation5(void); 
.................... void operation6(void); 
....................  
.................... void main() 
*
06F8:  CLRF   FF8
06FA:  BCF    FD0.7
06FC:  MOVLW  70
06FE:  MOVWF  FD3
0700:  CLRF   FD2
0702:  CLRF   F9B
0704:  CLRF   04
0706:  BSF    FB8.3
0708:  MOVLW  A0
070A:  MOVWF  FAF
070C:  MOVLW  01
070E:  MOVWF  FB0
0710:  MOVLW  A6
0712:  MOVWF  FAC
0714:  MOVLW  90
0716:  MOVWF  FAB
0718:  CLRF   06
071A:  CLRF   07
071C:  CLRF   08
071E:  CLRF   09
0720:  CLRF   10
0722:  CLRF   0F
0724:  MOVF   FC1,W
0726:  ANDLW  F0
0728:  MOVWF  FC1
072A:  MOVLW  00
072C:  MOVLB  F
072E:  MOVWF  x5B
0730:  MOVWF  x5F
0732:  MOVWF  x5C
0734:  MOVWF  x5D
0736:  MOVWF  x5E
0738:  MOVLB  1
073A:  CLRF   x88
073C:  CLRF   F9A
073E:  CLRF   F99
0740:  CLRF   F98
.................... { 
....................  
.................... 	setup_adc_ports(sAN0|sAN1|sAN2); 
0742:  MOVF   FC1,W
0744:  ANDLW  F0
0746:  MOVWF  FC1
0748:  MOVLW  07
074A:  MOVLB  F
074C:  MOVWF  x5B
074E:  MOVLW  00
0750:  MOVWF  x5F
0752:  MOVWF  x5C
0754:  MOVWF  x5D
0756:  MOVWF  x5E
.................... 	setup_adc(ADC_CLOCK_INTERNAL|ADC_TAD_MUL_0); 
0758:  MOVF   FC0,W
075A:  ANDLW  C0
075C:  IORLW  07
075E:  MOVWF  FC0
0760:  BCF    FC0.7
0762:  BSF    FC2.0
....................  
....................    lcd_init(); 
0764:  MOVLB  0
0766:  BRA    01E8
....................  
....................  
.................... 	while(TRUE) 
.................... 	{ 
....................  
.................... /*		operation 1 (press but 0) make the buzzer sound, and display on lcd and rs232 
.................... 		operation 2 (press but 1) make leds 0-7 display knight rider mode 
.................... 		opertaion 3 (press but 2) display the values of the 3 adc, AN0,AN1,AN2 on display line 0 and on the virtual terminal and display the  product of the values on the virtual terminal. 
.................... 		operation 4 (press but 3) make the two dual coloured leds (led-birg and led-biry) flash alternative colours 
.................... 		operation 5 (press but0 and but1) make the motor drive clockwise 
.................... 		operation 6 (press but2 and but3) make the motor drive anti clockwise 
.................... 		These operation should continue until the buttons are all release at which time everything will turn off. */ 
.................... 		ops=read_buts(); 
0768:  BRA    0264
076A:  MOVFF  01,0A
.................... 		if(ops!=old_ops) clear_outputs();									// clear outputs 
076E:  MOVF   0B,W
0770:  SUBWF  0A,W
0772:  BTFSS  FD8.2
0774:  BRA    02F2
.................... 		switch(ops) 
0776:  MOVF   0A,W
0778:  XORLW  01
077A:  BZ    0792
077C:  XORLW  03
077E:  BZ    0796
0780:  XORLW  06
0782:  BZ    079A
0784:  XORLW  0C
0786:  BZ    079E
0788:  XORLW  0B
078A:  BZ    07A2
078C:  XORLW  0F
078E:  BZ    07A6
0790:  BRA    07AA
.................... 			{ 
.................... 				case 1:		operation1(); 
0792:  BRA    0330
.................... 							break; 
0794:  BRA    07AA
.................... 				case 2:		operation2(); 
0796:  BRA    034C
.................... 							break; 
0798:  BRA    07AA
.................... 				case 4:		operation3(); 
079A:  BRA    057A
.................... 							break; 
079C:  BRA    07AA
.................... 				case 8:		operation4(); 
079E:  BRA    0638
.................... 							break; 
07A0:  BRA    07AA
.................... 				case 3:		operation5(); 
07A2:  BRA    06C8
.................... 							break; 
07A4:  BRA    07AA
.................... 				case 12:	operation6(); 
07A6:  BRA    06E0
.................... 							break; 
07A8:  BRA    07AA
....................  
.................... 				default:	break; 
.................... 			} 
.................... 		old_ops=ops; 
07AA:  MOVFF  0A,0B
07AE:  BRA    0768
.................... //		printf(lcd_putc,"\fbuttons= %u",read_buts()); 
.................... //		delay_ms(200); 
.................... //		printf("help me \n\r"); 
.................... 	} 
....................  
.................... } 
....................  
07B0:  SLEEP 
.................... void operation6(void) 
.................... 	{ 
.................... 		if (old_ops!=ops)					// is this the first time here 
*
06E0:  MOVF   0A,W
06E2:  SUBWF  0B,W
06E4:  BZ    06F0
.................... 			{ 
.................... 				printf(lcd_putc,"\fMotor Anti-clockwise");	// then print this 
06E6:  MOVLW  04
06E8:  MOVWF  FF6
06EA:  MOVLW  00
06EC:  MOVWF  FF7
06EE:  RCALL  0310
.................... 			} 
.................... 		output_high(PIN_A5); 
06F0:  BCF    F92.5
06F2:  BSF    F89.5
06F4:  GOTO   07AA (RETURN)
....................  
.................... 	} 
....................  
.................... void operation5(void) 
.................... 	{ 
.................... 		if (old_ops!=ops)					// is this the first time here 
*
06C8:  MOVF   0A,W
06CA:  SUBWF  0B,W
06CC:  BZ    06D8
.................... 			{ 
.................... 				printf(lcd_putc,"\fMotor Clockwise");	// then print this 
06CE:  MOVLW  1A
06D0:  MOVWF  FF6
06D2:  MOVLW  00
06D4:  MOVWF  FF7
06D6:  RCALL  0310
.................... 			} 
.................... 		output_high(PIN_A4); 
06D8:  BCF    F92.4
06DA:  BSF    F89.4
06DC:  GOTO   07AA (RETURN)
....................  
.................... 	} 
.................... void operation4(void) 
.................... 	{ 
.................... 		if (old_ops!=ops)					// is this the first time here 
*
0638:  MOVF   0A,W
063A:  SUBWF  0B,W
063C:  BZ    065C
.................... 			{ 
.................... 				printf(lcd_putc,"\fflash dual colour");	// then print this 
063E:  MOVLW  2C
0640:  MOVWF  FF6
0642:  MOVLW  00
0644:  MOVWF  FF7
0646:  RCALL  0310
.................... 				lcd_gotoxy(5,2); 
0648:  MOVLW  05
064A:  MOVWF  24
064C:  MOVLW  02
064E:  MOVWF  25
0650:  RCALL  0280
.................... 				printf(lcd_putc,"leds ");	// then print this 
0652:  MOVLW  40
0654:  MOVWF  FF6
0656:  MOVLW  00
0658:  MOVWF  FF7
065A:  RCALL  0310
.................... 			} 
.................... 		output_high(PIN_E0); 
065C:  BCF    F96.0
065E:  BSF    F8D.0
.................... 		output_low(PIN_E1); 
0660:  BCF    F96.1
0662:  BCF    F8D.1
.................... 		delay_ms(550); 
0664:  MOVLW  05
0666:  MOVWF  11
0668:  MOVLW  6E
066A:  MOVWF  24
066C:  RCALL  0096
066E:  DECFSZ 11,F
0670:  BRA    0668
.................... 		output_high(PIN_E1); 
0672:  BCF    F96.1
0674:  BSF    F8D.1
.................... 		output_low(PIN_E0); 
0676:  BCF    F96.0
0678:  BCF    F8D.0
.................... 		delay_ms(550); 
067A:  MOVLW  05
067C:  MOVWF  11
067E:  MOVLW  6E
0680:  MOVWF  24
0682:  RCALL  0096
0684:  DECFSZ 11,F
0686:  BRA    067E
.................... 		output_low(PIN_E1); 
0688:  BCF    F96.1
068A:  BCF    F8D.1
.................... 		output_low(PIN_E0); 
068C:  BCF    F96.0
068E:  BCF    F8D.0
.................... 		output_high(PIN_E2); 
0690:  BCF    F96.2
0692:  BSF    F8D.2
.................... 		output_low(PIN_E3); 
0694:  BCF    F96.3
0696:  BCF    F8D.3
.................... 		delay_ms(550); 
0698:  MOVLW  05
069A:  MOVWF  11
069C:  MOVLW  6E
069E:  MOVWF  24
06A0:  RCALL  0096
06A2:  DECFSZ 11,F
06A4:  BRA    069C
.................... 		output_high(PIN_E3); 
06A6:  BCF    F96.3
06A8:  BSF    F8D.3
.................... 		output_low(PIN_E2); 
06AA:  BCF    F96.2
06AC:  BCF    F8D.2
.................... 		delay_ms(550); 
06AE:  MOVLW  05
06B0:  MOVWF  11
06B2:  MOVLW  6E
06B4:  MOVWF  24
06B6:  RCALL  0096
06B8:  DECFSZ 11,F
06BA:  BRA    06B2
.................... 		output_low(PIN_E2); 
06BC:  BCF    F96.2
06BE:  BCF    F8D.2
.................... 		output_low(PIN_E3); 
06C0:  BCF    F96.3
06C2:  BCF    F8D.3
06C4:  GOTO   07AA (RETURN)
.................... 	} 
.................... void operation3(void) 
.................... 	{ 
.................... 		adc0=read_pot(0);							// get value of pots  
*
057A:  CLRF   11
057C:  RCALL  03C4
057E:  MOVFF  01,0C
.................... 		adc1=read_pot(1); 
0582:  MOVLW  01
0584:  MOVWF  11
0586:  RCALL  03C4
0588:  MOVFF  01,0D
.................... 		adc2=read_pot(2); 
058C:  MOVLW  02
058E:  MOVWF  11
0590:  RCALL  03C4
0592:  MOVFF  01,0E
.................... 		if (old_ops!=ops)					// is this the first time here 
0596:  MOVF   0A,W
0598:  SUBWF  0B,W
059A:  BZ    0634
.................... 			{ 
.................... 				printf(lcd_putc,"\fvalues of adc ");	// then print this 
059C:  MOVLW  46
059E:  MOVWF  FF6
05A0:  MOVLW  00
05A2:  MOVWF  FF7
05A4:  RCALL  0310
.................... 				lcd_gotoxy(1,2); 
05A6:  MOVLW  01
05A8:  MOVWF  24
05AA:  MOVLW  02
05AC:  MOVWF  25
05AE:  RCALL  0280
.................... 				printf(lcd_putc,"   %3u    %3u   %3u",adc0,adc1,adc2); 
05B0:  MOVLW  56
05B2:  MOVWF  FF6
05B4:  MOVLW  00
05B6:  MOVWF  FF7
05B8:  MOVLW  03
05BA:  MOVWF  13
05BC:  RCALL  03F0
05BE:  MOVFF  0C,11
05C2:  MOVLW  13
05C4:  MOVWF  12
05C6:  RCALL  0436
05C8:  MOVLW  5C
05CA:  MOVWF  FF6
05CC:  MOVLW  00
05CE:  MOVWF  FF7
05D0:  MOVLW  04
05D2:  MOVWF  13
05D4:  RCALL  03F0
05D6:  MOVFF  0D,11
05DA:  MOVLW  13
05DC:  MOVWF  12
05DE:  RCALL  0436
05E0:  MOVLW  63
05E2:  MOVWF  FF6
05E4:  MOVLW  00
05E6:  MOVWF  FF7
05E8:  MOVLW  03
05EA:  MOVWF  13
05EC:  RCALL  03F0
05EE:  MOVFF  0E,11
05F2:  MOVLW  13
05F4:  MOVWF  12
05F6:  RCALL  0436
.................... 				lcd_gotoxy(21,1);								// print on line 3 
05F8:  MOVLW  15
05FA:  MOVWF  24
05FC:  MOVLW  01
05FE:  MOVWF  25
0600:  RCALL  0280
.................... 				printf(lcd_putc," sum = %lu",routine1(adc0,adc1,adc2)); 
0602:  MOVFF  0C,11
0606:  MOVFF  0D,12
060A:  MOVFF  0E,13
060E:  BRA    049C
0610:  MOVFF  02,12
0614:  MOVFF  01,11
0618:  MOVLW  6A
061A:  MOVWF  FF6
061C:  MOVLW  00
061E:  MOVWF  FF7
0620:  MOVLW  07
0622:  MOVWF  13
0624:  RCALL  03F0
0626:  MOVLW  10
0628:  MOVWF  FE9
062A:  MOVFF  12,14
062E:  MOVFF  11,13
0632:  BRA    04BE
.................... 			} 
0634:  GOTO   07AA (RETURN)
.................... 	} 
....................  
.................... void operation2(void) 
.................... 	{ 
.................... unsigned int kr[15]=0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0; 
*
034C:  MOVLW  01
034E:  MOVWF  11
0350:  MOVLW  02
0352:  MOVWF  12
0354:  MOVLW  04
0356:  MOVWF  13
0358:  MOVLW  08
035A:  MOVWF  14
035C:  MOVLW  10
035E:  MOVWF  15
0360:  MOVLW  20
0362:  MOVWF  16
0364:  MOVLW  40
0366:  MOVWF  17
0368:  MOVLW  80
036A:  MOVWF  18
036C:  MOVLW  40
036E:  MOVWF  19
0370:  MOVLW  20
0372:  MOVWF  1A
0374:  MOVLW  10
0376:  MOVWF  1B
0378:  MOVLW  08
037A:  MOVWF  1C
037C:  MOVLW  04
037E:  MOVWF  1D
0380:  MOVLW  02
0382:  MOVWF  1E
0384:  CLRF   1F
.................... unsigned int q; 
.................... 		if (old_ops!=ops)					// is this the first time here 
0386:  MOVF   0A,W
0388:  SUBWF  0B,W
038A:  BZ    0396
.................... 			{ 
.................... 				printf(lcd_putc,"\fKnight Rider ");	// then print this 
038C:  MOVLW  76
038E:  MOVWF  FF6
0390:  MOVLW  00
0392:  MOVWF  FF7
0394:  RCALL  0310
.................... 			} 
.................... 		for(q=0;q<=13;q++)					// sequence the leds - 1 pass 
0396:  CLRF   20
0398:  MOVF   20,W
039A:  SUBLW  0D
039C:  BNC   03C0
.................... 			{ 
.................... 				output_b(kr[q]);			// send value to port 
039E:  CLRF   03
03A0:  MOVF   20,W
03A2:  ADDLW  11
03A4:  MOVWF  FE9
03A6:  MOVLW  00
03A8:  ADDWFC 03,W
03AA:  MOVWF  FEA
03AC:  MOVFF  FEF,21
03B0:  CLRF   F93
03B2:  MOVFF  21,F8A
.................... 				delay_ms(100);				// wait 0.1S 
03B6:  MOVLW  64
03B8:  MOVWF  24
03BA:  RCALL  0096
03BC:  INCF   20,F
03BE:  BRA    0398
....................  
.................... 			} 
03C0:  GOTO   07AA (RETURN)
.................... 	} 
....................  
.................... void operation1(void) 
.................... 	{ 
.................... 		output_high(pin_A6);				// turn on pin A6 
*
0330:  BCF    F92.6
0332:  BSF    F89.6
.................... 		output_low(pin_A7);					// turn off pin A7; 
0334:  BCF    F92.7
0336:  BCF    F89.7
.................... 		if (old_ops!=ops)					// is this the first time here 
0338:  MOVF   0A,W
033A:  SUBWF  0B,W
033C:  BZ    0348
.................... 			{ 
.................... 				printf(lcd_putc,"\fsounder - on ");	// then print this 
033E:  MOVLW  86
0340:  MOVWF  FF6
0342:  MOVLW  00
0344:  MOVWF  FF7
0346:  RCALL  0310
.................... 			} 
0348:  GOTO   07AA (RETURN)
.................... 	} 
....................  
.................... void clear_outputs(void) 
.................... 	{ 
.................... 		output_low(pin_A6);					// turn on pin A6 
*
02F2:  BCF    F92.6
02F4:  BCF    F89.6
.................... 		output_low(pin_A7);					// turn off pin A7 
02F6:  BCF    F92.7
02F8:  BCF    F89.7
.................... 		printf(lcd_putc,"\f");				// clear the screen 
02FA:  MOVLW  0C
02FC:  MOVWF  23
02FE:  RCALL  02A2
.................... 		output_b(0);						// clear all leds 
0300:  CLRF   F93
0302:  CLRF   F8A
.................... 		output_low(PIN_A4); 
0304:  BCF    F92.4
0306:  BCF    F89.4
.................... 		output_low(PIN_A5);		 
0308:  BCF    F92.5
030A:  BCF    F89.5
030C:  GOTO   0776 (RETURN)
.................... 	} 
....................  
.................... unsigned int read_buts(void) 
.................... 	{ 
.................... 		unsigned int buttons; 
.................... 		buttons = input_c();			// read port C 
*
0264:  SETF   F94
0266:  MOVFF  F82,11
.................... 		buttons = buttons & 0x07;		// mask off all unwanted pins 
026A:  MOVLW  07
026C:  ANDWF  11,F
.................... 		if(input(PIN_D3)) buttons+=8;	// add in the extra button on d3 
026E:  BSF    F95.3
0270:  BTFSS  F83.3
0272:  BRA    0278
0274:  MOVLW  08
0276:  ADDWF  11,F
.................... 		return(buttons);				// return the buttons value 
0278:  MOVFF  11,01
027C:  GOTO   076A (RETURN)
.................... 	} 
.................... unsigned long routine1(unsigned int A, unsigned int B, unsigned int C) 
.................... 	{ 
.................... 		unsigned long int outcome; 
.................... 		outcome= A; 
*
049C:  CLRF   15
049E:  MOVFF  11,14
.................... 		outcome +=B; 
04A2:  MOVF   12,W
04A4:  ADDWF  14,F
04A6:  MOVLW  00
04A8:  ADDWFC 15,F
.................... 		outcome +=C; 
04AA:  MOVF   13,W
04AC:  ADDWF  14,F
04AE:  MOVLW  00
04B0:  ADDWFC 15,F
.................... ; 
.................... 		return (outcome); 
04B2:  MOVFF  14,01
04B6:  MOVFF  15,02
04BA:  GOTO   0610 (RETURN)
.................... 	} 
....................  
.................... unsigned int read_pot(unsigned int chan)							// this routine gets the value of the defined pot and returns it to the calling routine. 
.................... 	{ 
.................... 		unsigned int value; 
.................... 		set_adc_channel(chan); 
*
03C4:  RLCF   11,W
03C6:  MOVWF  00
03C8:  RLCF   00,F
03CA:  MOVLW  FC
03CC:  ANDWF  00,F
03CE:  MOVF   FC2,W
03D0:  ANDLW  83
03D2:  IORWF  00,W
03D4:  MOVWF  FC2
.................... 		delay_us(20); 
03D6:  MOVLW  1A
03D8:  MOVWF  00
03DA:  DECFSZ 00,F
03DC:  BRA    03DA
03DE:  NOP   
.................... 		value=read_adc(); 
03E0:  BSF    FC2.1
03E2:  BTFSC  FC2.1
03E4:  BRA    03E2
03E6:  MOVFF  FC4,12
.................... 		return(value); 
03EA:  MOVFF  12,01
03EE:  RETURN 0
.................... 	} 
....................  

Configuration Fuses:
   Word  1: C821   PLL3X NOPLLEN NOCPUDIV LS48MHZ INTRC_IO PRIMARY_SW FCMEN IESO
   Word  2: 3C56   PUT BROWNOUT BORV22 NOLPBOR NOWDT WDT32768
   Word  3: 5100   CCP2C1 NOPBADEN T3CKC0 SDOB3 NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
