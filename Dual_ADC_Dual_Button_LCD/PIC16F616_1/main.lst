CCS PCM C Compiler, Version 5.103, 56135               21-Oct-24 10:43

               Filename:   C:\Users\CCS-USER\Documents\CCS C Projects\Embedded C\CCS\main.lst

               ROM used:   323 words (16%)
                           Largest free fragment is 1725
               RAM used:   5 (4%) at main() level
                           16 (12%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   111
0003:  NOP
.................... #include <main.h>
.................... #include <16F616.h>
.................... //////////// Standard Header file for the PIC16F616 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F616
.................... 
.................... #list
.................... 
.................... #device ADC=8
.................... 
.................... #FUSES PUT                   	//Power Up Timer
.................... #FUSES BROWNOUT              	//Reset when brownout detected
.................... 
.................... #use delay(internal=8MHz)
0004:  MOVLW  2A
0005:  MOVWF  04
0006:  MOVF   00,W
0007:  BTFSC  03.2
0008:  GOTO   016
0009:  MOVLW  02
000A:  MOVWF  21
000B:  CLRF   20
000C:  DECFSZ 20,F
000D:  GOTO   00C
000E:  DECFSZ 21,F
000F:  GOTO   00B
0010:  MOVLW  97
0011:  MOVWF  20
0012:  DECFSZ 20,F
0013:  GOTO   012
0014:  DECFSZ 00,F
0015:  GOTO   009
0016:  RETURN
.................... 
.................... #define LED PIN_A2
.................... #define DELAY 500
.................... 
.................... 
.................... 
.................... #define LCD_ENABLE_PIN PIN_C2
.................... #define LCD_RS_PIN PIN_C0
.................... #define LCD_RW_PIN PIN_C1
.................... #define LCD_DATA4 PIN_C3
.................... #define LCD_DATA5 PIN_C4
.................... #define LCD_DATA6 PIN_C5
.................... #define LCD_DATA7 PIN_A5
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00BB:  BSF    07.3
....................    output_float(LCD_DATA5);
00BC:  BSF    07.4
....................    output_float(LCD_DATA6);
00BD:  BSF    07.5
....................    output_float(LCD_DATA7);
00BE:  BSF    05.5
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00BF:  BCF    03.5
00C0:  BSF    07.1
00C1:  BSF    03.5
00C2:  BCF    07.1
....................    delay_cycles(1);
00C3:  NOP
....................    lcd_output_enable(1);
00C4:  BCF    03.5
00C5:  BSF    07.2
00C6:  BSF    03.5
00C7:  BCF    07.2
....................    delay_cycles(1);
00C8:  NOP
....................    high = lcd_read_nibble();
00C9:  BCF    03.5
00CA:  CALL   043
00CB:  MOVF   21,W
00CC:  MOVWF  2E
....................       
....................    lcd_output_enable(0);
00CD:  BCF    07.2
00CE:  BSF    03.5
00CF:  BCF    07.2
....................    delay_cycles(1);
00D0:  NOP
....................    lcd_output_enable(1);
00D1:  BCF    03.5
00D2:  BSF    07.2
00D3:  BSF    03.5
00D4:  BCF    07.2
....................    delay_us(1);
00D5:  GOTO   0D6
....................    low = lcd_read_nibble();
00D6:  BCF    03.5
00D7:  CALL   043
00D8:  MOVF   21,W
00D9:  MOVWF  2D
....................       
....................    lcd_output_enable(0);
00DA:  BCF    07.2
00DB:  BSF    03.5
00DC:  BCF    07.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00DD:  BCF    07.3
....................    output_drive(LCD_DATA5);
00DE:  BCF    07.4
....................    output_drive(LCD_DATA6);
00DF:  BCF    07.5
....................    output_drive(LCD_DATA7);
00E0:  BCF    05.5
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00E1:  BCF    03.5
00E2:  SWAPF  2E,W
00E3:  MOVWF  20
00E4:  MOVLW  F0
00E5:  ANDWF  20,F
00E6:  MOVF   20,W
00E7:  IORWF  2D,W
00E8:  MOVWF  21
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0043:  CLRF   2F
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0044:  BSF    03.5
0045:  BSF    07.3
0046:  MOVLW  00
0047:  BCF    03.5
0048:  BTFSC  07.3
0049:  MOVLW  01
004A:  IORWF  2F,F
....................    n |= input(LCD_DATA5) << 1;
004B:  BSF    03.5
004C:  BSF    07.4
004D:  MOVLW  00
004E:  BCF    03.5
004F:  BTFSC  07.4
0050:  MOVLW  01
0051:  MOVWF  20
0052:  BCF    03.0
0053:  RLF    20,F
0054:  MOVF   20,W
0055:  IORWF  2F,F
....................    n |= input(LCD_DATA6) << 2;
0056:  BSF    03.5
0057:  BSF    07.5
0058:  MOVLW  00
0059:  BCF    03.5
005A:  BTFSC  07.5
005B:  MOVLW  01
005C:  MOVWF  20
005D:  RLF    20,F
005E:  RLF    20,F
005F:  MOVLW  FC
0060:  ANDWF  20,F
0061:  MOVF   20,W
0062:  IORWF  2F,F
....................    n |= input(LCD_DATA7) << 3;
0063:  BSF    03.5
0064:  BSF    05.5
0065:  MOVLW  00
0066:  BCF    03.5
0067:  BTFSC  05.5
0068:  MOVLW  01
0069:  MOVWF  20
006A:  RLF    20,F
006B:  RLF    20,F
006C:  RLF    20,F
006D:  MOVLW  F8
006E:  ANDWF  20,F
006F:  MOVF   20,W
0070:  IORWF  2F,F
....................    
....................    return(n);
0071:  MOVF   2F,W
0072:  MOVWF  21
....................   #else
0073:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0017:  BTFSC  2E.0
0018:  GOTO   01B
0019:  BCF    07.3
001A:  GOTO   01C
001B:  BSF    07.3
001C:  BSF    03.5
001D:  BCF    07.3
....................    output_bit(LCD_DATA5, bit_test(n, 1));
001E:  BCF    03.5
001F:  BTFSC  2E.1
0020:  GOTO   023
0021:  BCF    07.4
0022:  GOTO   024
0023:  BSF    07.4
0024:  BSF    03.5
0025:  BCF    07.4
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0026:  BCF    03.5
0027:  BTFSC  2E.2
0028:  GOTO   02B
0029:  BCF    07.5
002A:  GOTO   02C
002B:  BSF    07.5
002C:  BSF    03.5
002D:  BCF    07.5
....................    output_bit(LCD_DATA7, bit_test(n, 3));
002E:  BCF    03.5
002F:  BTFSC  2E.3
0030:  GOTO   033
0031:  BCF    05.5
0032:  GOTO   034
0033:  BSF    05.5
0034:  BSF    03.5
0035:  BCF    05.5
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0036:  NOP
....................    lcd_output_enable(1);
0037:  BCF    03.5
0038:  BSF    07.2
0039:  BSF    03.5
003A:  BCF    07.2
....................    delay_us(2);
003B:  GOTO   03C
003C:  GOTO   03D
....................    lcd_output_enable(0);
003D:  BCF    03.5
003E:  BCF    07.2
003F:  BSF    03.5
0040:  BCF    07.2
0041:  BCF    03.5
0042:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
00B3:  BSF    03.5
00B4:  BCF    07.2
....................    lcd_rs_tris();
00B5:  BCF    07.0
....................    lcd_rw_tris();
00B6:  BCF    07.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
00B7:  BCF    03.5
00B8:  BCF    07.0
00B9:  BSF    03.5
00BA:  BCF    07.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00E9:  MOVF   21,W
00EA:  MOVWF  2D
00EB:  BTFSS  2D.7
00EC:  GOTO   0EF
00ED:  BSF    03.5
00EE:  GOTO   0BB
....................    lcd_output_rs(address);
00EF:  MOVF   2B,F
00F0:  BTFSS  03.2
00F1:  GOTO   0F4
00F2:  BCF    07.0
00F3:  GOTO   0F5
00F4:  BSF    07.0
00F5:  BSF    03.5
00F6:  BCF    07.0
....................    delay_cycles(1);
00F7:  NOP
....................    lcd_output_rw(0);
00F8:  BCF    03.5
00F9:  BCF    07.1
00FA:  BSF    03.5
00FB:  BCF    07.1
....................    delay_cycles(1);
00FC:  NOP
....................    lcd_output_enable(0);
00FD:  BCF    03.5
00FE:  BCF    07.2
00FF:  BSF    03.5
0100:  BCF    07.2
....................    lcd_send_nibble(n >> 4);
0101:  BCF    03.5
0102:  SWAPF  2C,W
0103:  MOVWF  2D
0104:  MOVLW  0F
0105:  ANDWF  2D,F
0106:  MOVF   2D,W
0107:  MOVWF  2E
0108:  CALL   017
....................    lcd_send_nibble(n & 0xf);
0109:  MOVF   2C,W
010A:  ANDLW  0F
010B:  MOVWF  2D
010C:  MOVWF  2E
010D:  CALL   017
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
*
0074:  MOVLW  28
0075:  MOVWF  26
0076:  MOVLW  0C
0077:  MOVWF  27
0078:  MOVLW  01
0079:  MOVWF  28
007A:  MOVLW  06
007B:  MOVWF  29
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
007C:  BCF    07.2
007D:  BSF    03.5
007E:  BCF    07.2
....................    lcd_output_rs(0);
007F:  BCF    03.5
0080:  BCF    07.0
0081:  BSF    03.5
0082:  BCF    07.0
....................    lcd_output_rw(0);
0083:  BCF    03.5
0084:  BCF    07.1
0085:  BSF    03.5
0086:  BCF    07.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0087:  BCF    07.3
....................    output_drive(LCD_DATA5);
0088:  BCF    07.4
....................    output_drive(LCD_DATA6);
0089:  BCF    07.5
....................    output_drive(LCD_DATA7);
008A:  BCF    05.5
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
008B:  BCF    07.2
....................    lcd_rs_tris();
008C:  BCF    07.0
....................    lcd_rw_tris();
008D:  BCF    07.1
....................  #endif
....................     
....................    delay_ms(15);
008E:  MOVLW  0F
008F:  BCF    03.5
0090:  MOVWF  2A
0091:  CALL   004
....................    for(i=1;i<=3;++i)
0092:  MOVLW  01
0093:  MOVWF  25
0094:  MOVF   25,W
0095:  SUBLW  03
0096:  BTFSS  03.0
0097:  GOTO   0A0
....................    {
....................        lcd_send_nibble(3);
0098:  MOVLW  03
0099:  MOVWF  2E
009A:  CALL   017
....................        delay_ms(5);
009B:  MOVLW  05
009C:  MOVWF  2A
009D:  CALL   004
009E:  INCF   25,F
009F:  GOTO   094
....................    }
....................    
....................    lcd_send_nibble(2);
00A0:  MOVLW  02
00A1:  MOVWF  2E
00A2:  CALL   017
....................    delay_ms(5);
00A3:  MOVLW  05
00A4:  MOVWF  2A
00A5:  CALL   004
....................    for(i=0;i<=3;++i)
00A6:  CLRF   25
00A7:  MOVF   25,W
00A8:  SUBLW  03
00A9:  BTFSS  03.0
00AA:  GOTO   110
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00AB:  MOVLW  26
00AC:  ADDWF  25,W
00AD:  MOVWF  04
00AE:  MOVF   00,W
00AF:  MOVWF  2A
00B0:  CLRF   2B
00B1:  MOVF   2A,W
00B2:  MOVWF  2C
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
*
010E:  INCF   25,F
010F:  GOTO   0A7
0110:  GOTO   12B (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
....................       address=LCD_LINE_TWO;
....................    else
....................       address=0;
....................      
....................    address+=x-1;
....................    lcd_send_byte(0,0x80|address);
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
....................                      delay_ms(2);
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
....................      #endif
....................    }
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... void main()
0111:  MOVF   03,W
0112:  ANDLW  1F
0113:  MOVWF  03
0114:  BCF    1F.6
0115:  MOVLW  00
0116:  BSF    03.5
0117:  MOVWF  11
0118:  BCF    03.5
0119:  CLRF   1A
011A:  CLRF   1B
011B:  CLRF   1C
011C:  BSF    03.5
011D:  CLRF   1A
011E:  CLRF   19
.................... {
.................... 	setup_adc_ports(sAN0, VSS_VDD);
011F:  BCF    03.5
0120:  BCF    1F.6
0121:  MOVLW  01
0122:  BSF    03.5
0123:  MOVWF  11
.................... 	setup_adc(ADC_CLOCK_INTERNAL);
0124:  BSF    1F.4
0125:  BSF    1F.5
0126:  BCF    1F.6
0127:  BCF    03.5
0128:  BCF    1F.7
0129:  BSF    1F.0
.................... 
....................    lcd_init();
012A:  GOTO   074
.................... 
.................... 	while(TRUE)
.................... 	{
.................... 
.................... 		//Example blinking LED program
.................... 		output_low(LED);
012B:  BSF    03.5
012C:  BCF    05.2
012D:  BCF    03.5
012E:  BCF    05.2
.................... 		delay_ms(DELAY);
012F:  MOVLW  02
0130:  MOVWF  25
0131:  MOVLW  FA
0132:  MOVWF  2A
0133:  CALL   004
0134:  DECFSZ 25,F
0135:  GOTO   131
.................... 		output_high(LED);
0136:  BSF    03.5
0137:  BCF    05.2
0138:  BCF    03.5
0139:  BSF    05.2
.................... 		delay_ms(DELAY);
013A:  MOVLW  02
013B:  MOVWF  25
013C:  MOVLW  FA
013D:  MOVWF  2A
013E:  CALL   004
013F:  DECFSZ 25,F
0140:  GOTO   13C
0141:  GOTO   12B
.................... 
.................... 		//TODO: User Code
.................... 	}
.................... 
.................... }
0142:  SLEEP

Configuration Fuses:
   Word  1: 3FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT IOSC8 BROWNOUT
