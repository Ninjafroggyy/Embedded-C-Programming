CCS PCH C Compiler, Version 5.117d, 1               28-Oct-24 12:54
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\ISA06016798\Documents\Project 2\Pro\PIC18F4550_1\Debug.lst

               ROM used:   1720 bytes (5%)
                           Largest free fragment is 31044
               RAM used:   50 (2%) at main() level
                           63 (3%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0512
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.1
0056:  GOTO   0060
005A:  BTFSC  F9E.1
005C:  GOTO   00D2
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   00DC
006C:  BTFSS  FF0.3
006E:  GOTO   0078
0072:  BTFSC  FF0.0
0074:  GOTO   00E2
0078:  BTFSS  FF0.4
007A:  GOTO   0084
007E:  BTFSC  FF0.1
0080:  GOTO   00EC
0084:  MOVFF  0E,00
0088:  MOVFF  0F,01
008C:  MOVFF  10,02
0090:  MOVFF  11,03
0094:  MOVFF  0C,FE9
0098:  MOVFF  07,FEA
009C:  BSF    07.7
009E:  MOVFF  08,FE1
00A2:  MOVFF  09,FE2
00A6:  MOVFF  0A,FD9
00AA:  MOVFF  0B,FDA
00AE:  MOVFF  12,FF3
00B2:  MOVFF  13,FF4
00B6:  MOVFF  14,FFA
00BA:  MOVFF  15,FF5
00BE:  MOVFF  16,FF6
00C2:  MOVFF  17,FF7
00C6:  MOVF   04,W
00C8:  MOVFF  06,FE0
00CC:  MOVFF  05,FD8
00D0:  RETFIE 0
.................... #import(file="main.o")
.................... #define LCD_ENABLE_PIN PIN_D2
.................... #define LCD_ENABLE_PIN PIN_D2
.................... #define LCD_RS_PIN PIN_D0
.................... #define LCD_RW_PIN PIN_D1
.................... #define LCD_DATA4 PIN_D4
.................... #define LCD_DATA5 PIN_D5
.................... #define LCD_DATA6 PIN_D6
.................... #define LCD_DATA7 PIN_D7
.................... #include <main.h>
.................... #include <18F4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
*
00F6:  DATA 56,61
00F8:  DATA 6C,75
00FA:  DATA 65,30
00FC:  DATA 20,3D
00FE:  DATA 20,25
0100:  DATA 33,75
0102:  DATA 00,00
0104:  DATA 56,61
0106:  DATA 6C,75
0108:  DATA 65,31
010A:  DATA 20,3D
010C:  DATA 20,25
010E:  DATA 33,75
0110:  DATA 00,00
0112:  DATA 56,61
0114:  DATA 6C,75
0116:  DATA 65,32
0118:  DATA 20,3D
011A:  DATA 20,25
011C:  DATA 33,75
011E:  DATA 00,00
*
03B8:  TBLRD*+
03BA:  MOVFF  FF6,32
03BE:  MOVFF  FF7,33
03C2:  MOVFF  FF5,34
03C6:  RCALL  0368
03C8:  MOVFF  32,FF6
03CC:  MOVFF  33,FF7
03D0:  DECFSZ 31,F
03D2:  BRA    03B8
03D4:  RETURN 0
03D6:  MOVF   34,W
03D8:  CLRF   01
03DA:  SUBWF  33,W
03DC:  BC    03E4
03DE:  MOVFF  33,00
03E2:  BRA    03FC
03E4:  CLRF   00
03E6:  MOVLW  08
03E8:  MOVWF  35
03EA:  RLCF   33,F
03EC:  RLCF   00,F
03EE:  MOVF   34,W
03F0:  SUBWF  00,W
03F2:  BTFSC  FD8.0
03F4:  MOVWF  00
03F6:  RLCF   01,F
03F8:  DECFSZ 35,F
03FA:  BRA    03EA
03FC:  RETURN 0
03FE:  MOVF   01,W
0400:  MOVFF  31,33
0404:  MOVLW  64
0406:  MOVWF  34
0408:  RCALL  03D6
040A:  MOVFF  00,31
040E:  MOVF   01,W
0410:  MOVLW  30
0412:  BNZ   0422
0414:  BTFSS  32.1
0416:  BRA    0430
0418:  BTFSC  32.3
041A:  BRA    0430
041C:  BTFSC  32.4
041E:  MOVLW  20
0420:  BRA    0428
0422:  BCF    32.3
0424:  BCF    32.4
0426:  BSF    32.0
0428:  ADDWF  01,F
042A:  MOVFF  01,34
042E:  RCALL  0368
0430:  MOVFF  31,33
0434:  MOVLW  0A
0436:  MOVWF  34
0438:  RCALL  03D6
043A:  MOVFF  00,31
043E:  MOVF   01,W
0440:  MOVLW  30
0442:  BNZ   0450
0444:  BTFSC  32.3
0446:  BRA    0458
0448:  BTFSS  32.0
044A:  BRA    0458
044C:  BTFSC  32.4
044E:  MOVLW  20
0450:  ADDWF  01,F
0452:  MOVFF  01,34
0456:  RCALL  0368
0458:  MOVLW  30
045A:  ADDWF  31,F
045C:  MOVFF  31,34
0460:  RCALL  0368
0462:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=8
.................... 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled
.................... #FUSES PUT                   	//Power Up Timer
.................... #FUSES BROWNOUT              	//Reset when brownout detected
.................... #FUSES BORV28                	//Brownout reset at 2.7V
.................... #FUSES NOVREGEN              	//USB voltage regulator disabled
.................... #FUSES NOPBADEN              	//PORTB pins are configured as digital I/O on RESET
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O
.................... #FUSES STVREN                	//Stack full/underflow will cause reset
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES NOPROTECT             	//Code not protected from reading
.................... #FUSES NOCPB                 	//No Boot Block code protection
.................... #FUSES NOCPD                 	//No EE protection
.................... #FUSES NOWRT                 	//Program memory not write protected
.................... #FUSES NOWRTC                	//Configuration registers not write protected
.................... #FUSES NOWRTB                	//Boot block not write protected
.................... #FUSES NOWRTD                	//Data EEPROM not write protected
.................... #FUSES NOEBTR                	//Memory not protected from table reads
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads
.................... 
.................... #use delay(internal=8MHz)
*
0120:  CLRF   FEA
0122:  MOVLW  36
0124:  MOVWF  FE9
0126:  MOVF   FEF,W
0128:  BZ    0144
012A:  MOVLW  02
012C:  MOVWF  01
012E:  CLRF   00
0130:  DECFSZ 00,F
0132:  BRA    0130
0134:  DECFSZ 01,F
0136:  BRA    012E
0138:  MOVLW  97
013A:  MOVWF  00
013C:  DECFSZ 00,F
013E:  BRA    013C
0140:  DECFSZ FEF,F
0142:  BRA    012A
0144:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1,errors)
.................... 
.................... #define LED PIN_B3
.................... #define DELAY 500
.................... 
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
01D8:  BSF    F95.4
....................    output_float(LCD_DATA5);
01DA:  BSF    F95.5
....................    output_float(LCD_DATA6);
01DC:  BSF    F95.6
....................    output_float(LCD_DATA7);
01DE:  BSF    F95.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
01E0:  BSF    F8C.1
01E2:  BCF    F95.1
....................    delay_cycles(1);
01E4:  NOP   
....................    lcd_output_enable(1);
01E6:  BSF    F8C.2
01E8:  BCF    F95.2
....................    delay_cycles(1);
01EA:  NOP   
....................    high = lcd_read_nibble();
01EC:  RCALL  0186
01EE:  MOVFF  01,3C
....................       
....................    lcd_output_enable(0);
01F2:  BCF    F8C.2
01F4:  BCF    F95.2
....................    delay_cycles(1);
01F6:  NOP   
....................    lcd_output_enable(1);
01F8:  BSF    F8C.2
01FA:  BCF    F95.2
....................    delay_us(1);
01FC:  BRA    01FE
....................    low = lcd_read_nibble();
01FE:  RCALL  0186
0200:  MOVFF  01,3B
....................       
....................    lcd_output_enable(0);
0204:  BCF    F8C.2
0206:  BCF    F95.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0208:  BCF    F95.4
....................    output_drive(LCD_DATA5);
020A:  BCF    F95.5
....................    output_drive(LCD_DATA6);
020C:  BCF    F95.6
....................    output_drive(LCD_DATA7);
020E:  BCF    F95.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0210:  SWAPF  3C,W
0212:  MOVWF  00
0214:  MOVLW  F0
0216:  ANDWF  00,F
0218:  MOVF   00,W
021A:  IORWF  3B,W
021C:  MOVWF  01
021E:  GOTO   022E (RETURN)
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0186:  CLRF   3D
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0188:  BSF    F95.4
018A:  MOVLW  00
018C:  BTFSC  F83.4
018E:  MOVLW  01
0190:  IORWF  3D,F
....................    n |= input(LCD_DATA5) << 1;
0192:  BSF    F95.5
0194:  MOVLW  00
0196:  BTFSC  F83.5
0198:  MOVLW  01
019A:  MOVWF  00
019C:  BCF    FD8.0
019E:  RLCF   00,F
01A0:  MOVF   00,W
01A2:  IORWF  3D,F
....................    n |= input(LCD_DATA6) << 2;
01A4:  BSF    F95.6
01A6:  MOVLW  00
01A8:  BTFSC  F83.6
01AA:  MOVLW  01
01AC:  MOVWF  00
01AE:  RLCF   00,F
01B0:  RLCF   00,F
01B2:  MOVLW  FC
01B4:  ANDWF  00,F
01B6:  MOVF   00,W
01B8:  IORWF  3D,F
....................    n |= input(LCD_DATA7) << 3;
01BA:  BSF    F95.7
01BC:  MOVLW  00
01BE:  BTFSC  F83.7
01C0:  MOVLW  01
01C2:  MOVWF  00
01C4:  RLCF   00,F
01C6:  RLCF   00,F
01C8:  RLCF   00,F
01CA:  MOVLW  F8
01CC:  ANDWF  00,F
01CE:  MOVF   00,W
01D0:  IORWF  3D,F
....................    
....................    return(n);
01D2:  MOVFF  3D,01
....................   #else
01D6:  RETURN 0
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0146:  BTFSC  3C.0
0148:  BRA    014E
014A:  BCF    F8C.4
014C:  BRA    0150
014E:  BSF    F8C.4
0150:  BCF    F95.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0152:  BTFSC  3C.1
0154:  BRA    015A
0156:  BCF    F8C.5
0158:  BRA    015C
015A:  BSF    F8C.5
015C:  BCF    F95.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
015E:  BTFSC  3C.2
0160:  BRA    0166
0162:  BCF    F8C.6
0164:  BRA    0168
0166:  BSF    F8C.6
0168:  BCF    F95.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
016A:  BTFSC  3C.3
016C:  BRA    0172
016E:  BCF    F8C.7
0170:  BRA    0174
0172:  BSF    F8C.7
0174:  BCF    F95.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0176:  NOP   
....................    lcd_output_enable(1);
0178:  BSF    F8C.2
017A:  BCF    F95.2
....................    delay_us(2);
017C:  BRA    017E
017E:  BRA    0180
....................    lcd_output_enable(0);
0180:  BCF    F8C.2
0182:  BCF    F95.2
0184:  RETURN 0
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0222:  BCF    F95.2
....................    lcd_rs_tris();
0224:  BCF    F95.0
....................    lcd_rw_tris();
0226:  BCF    F95.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
0228:  BCF    F8C.0
022A:  BCF    F95.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
022C:  BRA    01D8
022E:  MOVFF  01,3B
0232:  BTFSC  01.7
0234:  BRA    022C
....................    lcd_output_rs(address);
0236:  MOVF   39,F
0238:  BNZ   023E
023A:  BCF    F8C.0
023C:  BRA    0240
023E:  BSF    F8C.0
0240:  BCF    F95.0
....................    delay_cycles(1);
0242:  NOP   
....................    lcd_output_rw(0);
0244:  BCF    F8C.1
0246:  BCF    F95.1
....................    delay_cycles(1);
0248:  NOP   
....................    lcd_output_enable(0);
024A:  BCF    F8C.2
024C:  BCF    F95.2
....................    lcd_send_nibble(n >> 4);
024E:  SWAPF  3A,W
0250:  MOVWF  3B
0252:  MOVLW  0F
0254:  ANDWF  3B,F
0256:  MOVFF  3B,3C
025A:  RCALL  0146
....................    lcd_send_nibble(n & 0xf);
025C:  MOVF   3A,W
025E:  ANDLW  0F
0260:  MOVWF  3B
0262:  MOVWF  3C
0264:  RCALL  0146
0266:  RETURN 0
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0268:  MOVLW  28
026A:  MOVWF  32
026C:  MOVLW  0C
026E:  MOVWF  33
0270:  MOVLW  01
0272:  MOVWF  34
0274:  MOVLW  06
0276:  MOVWF  35
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0278:  BCF    F8C.2
027A:  BCF    F95.2
....................    lcd_output_rs(0);
027C:  BCF    F8C.0
027E:  BCF    F95.0
....................    lcd_output_rw(0);
0280:  BCF    F8C.1
0282:  BCF    F95.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0284:  BCF    F95.4
....................    output_drive(LCD_DATA5);
0286:  BCF    F95.5
....................    output_drive(LCD_DATA6);
0288:  BCF    F95.6
....................    output_drive(LCD_DATA7);
028A:  BCF    F95.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
028C:  BCF    F95.2
....................    lcd_rs_tris();
028E:  BCF    F95.0
....................    lcd_rw_tris();
0290:  BCF    F95.1
....................  #endif
....................     
....................    delay_ms(15);
0292:  MOVLW  0F
0294:  MOVWF  36
0296:  RCALL  0120
....................    for(i=1;i<=3;++i)
0298:  MOVLW  01
029A:  MOVWF  31
029C:  MOVF   31,W
029E:  SUBLW  03
02A0:  BNC   02B2
....................    {
....................        lcd_send_nibble(3);
02A2:  MOVLW  03
02A4:  MOVWF  3C
02A6:  RCALL  0146
....................        delay_ms(5);
02A8:  MOVLW  05
02AA:  MOVWF  36
02AC:  RCALL  0120
02AE:  INCF   31,F
02B0:  BRA    029C
....................    }
....................    
....................    lcd_send_nibble(2);
02B2:  MOVLW  02
02B4:  MOVWF  3C
02B6:  RCALL  0146
....................    delay_ms(5);
02B8:  MOVLW  05
02BA:  MOVWF  36
02BC:  RCALL  0120
....................    for(i=0;i<=3;++i)
02BE:  CLRF   31
02C0:  MOVF   31,W
02C2:  SUBLW  03
02C4:  BNC   02E0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
02C6:  CLRF   03
02C8:  MOVF   31,W
02CA:  ADDLW  32
02CC:  MOVWF  FE9
02CE:  MOVLW  00
02D0:  ADDWFC 03,W
02D2:  MOVWF  FEA
02D4:  MOVFF  FEF,3A
02D8:  CLRF   39
02DA:  RCALL  0222
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
02DC:  INCF   31,F
02DE:  BRA    02C0
02E0:  GOTO   05AA (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0346:  DECFSZ 36,W
0348:  BRA    034C
034A:  BRA    0352
....................       address=LCD_LINE_TWO;
034C:  MOVLW  40
034E:  MOVWF  37
0350:  BRA    0354
....................    else
....................       address=0;
0352:  CLRF   37
....................      
....................    address+=x-1;
0354:  MOVLW  01
0356:  SUBWF  35,W
0358:  ADDWF  37,F
....................    lcd_send_byte(0,0x80|address);
035A:  MOVF   37,W
035C:  IORLW  80
035E:  MOVWF  38
0360:  CLRF   39
0362:  MOVWF  3A
0364:  RCALL  0222
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0366:  RETURN 0
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0368:  MOVF   34,W
036A:  XORLW  07
036C:  BZ    037C
036E:  XORLW  0B
0370:  BZ    0386
0372:  XORLW  06
0374:  BZ    0396
0376:  XORLW  02
0378:  BZ    03A2
037A:  BRA    03AC
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
037C:  MOVLW  01
037E:  MOVWF  35
0380:  MOVWF  36
0382:  RCALL  0346
0384:  BRA    03B6
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0386:  CLRF   39
0388:  MOVLW  01
038A:  MOVWF  3A
038C:  RCALL  0222
....................                      delay_ms(2);
038E:  MOVLW  02
0390:  MOVWF  36
0392:  RCALL  0120
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0394:  BRA    03B6
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0396:  MOVLW  01
0398:  MOVWF  35
039A:  MOVLW  02
039C:  MOVWF  36
039E:  RCALL  0346
03A0:  BRA    03B6
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
03A2:  CLRF   39
03A4:  MOVLW  10
03A6:  MOVWF  3A
03A8:  RCALL  0222
03AA:  BRA    03B6
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
03AC:  MOVLW  01
03AE:  MOVWF  39
03B0:  MOVFF  34,3A
03B4:  RCALL  0222
....................      #endif
....................    }
03B6:  RETURN 0
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... void analogs(void);
.................... void printanalogs(void);
.................... void rotate(void);
.................... 
.................... unsigned int count;
.................... unsigned int value0, value1, value2;
.................... unsigned int lights_A[9] = {0x01, 0x03, 0x04, 0x02, 0x01, 0x01, 0x01, 0x01};		// red, red+yel, gre, yel, red, red, red, red, red
.................... unsigned int lights_B[9] = {0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x04, 0x02};		// red, red, red, red, red, red+yel, gre, yel
.................... 
.................... 
.................... #INT_TIMER2
.................... void  TIMER2_isr(void) {
....................    count = 1;
*
00D2:  MOVLW  01
00D4:  MOVWF  1A
.................... }
.................... 
00D6:  BCF    F9E.1
00D8:  GOTO   0084
.................... #INT_EXT
.................... void  EXT_isr(void) {
....................    
.................... }
.................... 
00DC:  BCF    FF2.1
00DE:  GOTO   0084
.................... #INT_EXT1
.................... void  EXT1_isr(void) {
....................    count = 2;
00E2:  MOVLW  02
00E4:  MOVWF  1A
.................... }
.................... 
00E6:  BCF    FF0.0
00E8:  GOTO   0084
.................... #INT_EXT2
.................... void  EXT2_isr(void) {
....................    count = 3;
00EC:  MOVLW  03
00EE:  MOVWF  1A
00F0:  BCF    FF0.1
00F2:  GOTO   0084
.................... }
.................... 
.................... 
.................... void main() {
*
0512:  CLRF   FF8
0514:  BCF    FD0.7
0516:  BSF    07.7
0518:  MOVLW  70
051A:  MOVWF  FD3
051C:  MOVF   FD3,W
051E:  CLRF   19
0520:  BCF    FB8.3
0522:  MOVLW  0C
0524:  MOVWF  FAF
0526:  MOVLW  A2
0528:  MOVWF  FAC
052A:  MOVLW  90
052C:  MOVWF  FAB
052E:  MOVLW  01
0530:  MOVWF  1E
0532:  MOVLW  03
0534:  MOVWF  1F
0536:  MOVLW  04
0538:  MOVWF  20
053A:  MOVLW  02
053C:  MOVWF  21
053E:  MOVLW  01
0540:  MOVWF  22
0542:  MOVLW  01
0544:  MOVWF  23
0546:  MOVLW  01
0548:  MOVWF  24
054A:  MOVLW  01
054C:  MOVWF  25
054E:  CLRF   26
0550:  MOVLW  01
0552:  MOVWF  27
0554:  MOVLW  01
0556:  MOVWF  28
0558:  MOVLW  01
055A:  MOVWF  29
055C:  MOVLW  01
055E:  MOVWF  2A
0560:  MOVLW  01
0562:  MOVWF  2B
0564:  MOVLW  03
0566:  MOVWF  2C
0568:  MOVLW  04
056A:  MOVWF  2D
056C:  MOVLW  02
056E:  MOVWF  2E
0570:  CLRF   2F
0572:  MOVF   FC1,W
0574:  ANDLW  C0
0576:  IORLW  0F
0578:  MOVWF  FC1
057A:  MOVLW  07
057C:  MOVWF  FB4
....................    setup_adc_ports(AN0_TO_AN2);
057E:  MOVF   FC1,W
0580:  ANDLW  C0
0582:  IORLW  0C
0584:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_INTERNAL|ADC_TAD_MUL_0);
0586:  MOVF   FC0,W
0588:  ANDLW  C0
058A:  IORLW  07
058C:  MOVWF  FC0
058E:  BCF    FC0.7
0590:  BSF    FC2.0
....................    setup_timer_2(T2_DIV_BY_16, 249, 15);			//2.0 ms overflow, 30.0 ms interrupt
0592:  MOVLW  70
0594:  IORLW  06
0596:  MOVWF  FCA
0598:  MOVLW  F9
059A:  MOVWF  FCB
....................       
....................    enable_interrupts(INT_TIMER2);
059C:  BSF    F9D.1
....................    enable_interrupts(INT_EXT);
059E:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1);
05A0:  BSF    FF0.3
....................    enable_interrupts(INT_EXT2);
05A2:  BSF    FF0.4
....................    enable_interrupts(GLOBAL);
05A4:  MOVLW  C0
05A6:  IORWF  FF2,F
.................... 
....................    lcd_init();
05A8:  BRA    0268
.................... 
....................    while(TRUE) {
....................       //Example blinking LED program
....................       output_low(LED);
05AA:  BCF    F93.3
05AC:  BCF    F8A.3
....................       delay_ms(DELAY);
05AE:  MOVLW  02
05B0:  MOVWF  31
05B2:  MOVLW  FA
05B4:  MOVWF  36
05B6:  RCALL  0120
05B8:  DECFSZ 31,F
05BA:  BRA    05B2
....................       output_high(LED);
05BC:  BCF    F93.3
05BE:  BSF    F8A.3
....................       delay_ms(DELAY);   
05C0:  MOVLW  02
05C2:  MOVWF  31
05C4:  MOVLW  FA
05C6:  MOVWF  36
05C8:  RCALL  0120
05CA:  DECFSZ 31,F
05CC:  BRA    05C4
....................       
....................       /*
....................       if (count) {
.................... 	 switch(count)
.................... 	 {
.................... 	    case 1: lcd_gotoxy(1, 1);
.................... 		    printf(lcd_putc, "Line 1");
.................... 		    count = 0;
.................... 		    break;
.................... 	    
.................... 	    case 2: lcd_gotoxy(1, 2);
.................... 		    printf(lcd_putc, "Line 2");
.................... 		    count = 0;
.................... 		    break;
.................... 	    
.................... 	    case 3: lcd_gotoxy(21, 1);
.................... 		    printf(lcd_putc, "Line 3");
.................... 		    count = 0;
.................... 		    break;
.................... 	    
.................... 	    default: count = 0;
.................... 		     break;
.................... 	 }
....................       } */
....................      
....................       if (input(PIN_B4)) {
05CE:  BSF    F93.4
05D0:  BTFSS  F81.4
05D2:  BRA    05D8
.................... 	 analogs();
05D4:  RCALL  02E4
.................... 	 printanalogs();
05D6:  BRA    0464
....................       }
....................       
....................       if (input(PIN_B5)) {
05D8:  BSF    F93.5
05DA:  BTFSS  F81.5
05DC:  BRA    05E2
.................... 	 analogs();
05DE:  RCALL  02E4
.................... 	 rotate();
05E0:  BRA    04CC
....................       }
....................       
....................       if (input(PIN_B7)) {
05E2:  BSF    F93.7
05E4:  BTFSS  F81.7
05E6:  BRA    06B8
.................... 	 for (int q = 0; q <= 7; q++) {
05E8:  CLRF   30
05EA:  MOVF   30,W
05EC:  SUBLW  07
05EE:  BTFSS  FD8.0
05F0:  BRA    06B8
.................... 	    switch(lights_A[q]) {
05F2:  CLRF   03
05F4:  MOVF   30,W
05F6:  ADDLW  1E
05F8:  MOVWF  FE9
05FA:  MOVLW  00
05FC:  ADDWFC 03,W
05FE:  MOVWF  FEA
0600:  MOVF   FEF,W
0602:  XORLW  01
0604:  BZ    0614
0606:  XORLW  03
0608:  BZ    0622
060A:  XORLW  01
060C:  BZ    0630
060E:  XORLW  07
0610:  BZ    063E
0612:  BRA    064C
.................... 	       case 0x01:  output_high(PIN_A4);
0614:  BCF    F92.4
0616:  BSF    F89.4
.................... 			   output_low(PIN_A5);
0618:  BCF    F92.5
061A:  BCF    F89.5
.................... 			   output_low(PIN_A6);
061C:  BCF    F92.6
061E:  BCF    F89.6
.................... 			   break;
0620:  BRA    064C
.................... 	       case 0x02:  output_low(PIN_A4);
0622:  BCF    F92.4
0624:  BCF    F89.4
.................... 			   output_high(PIN_A5);
0626:  BCF    F92.5
0628:  BSF    F89.5
.................... 			   output_low(PIN_A6);
062A:  BCF    F92.6
062C:  BCF    F89.6
.................... 			   break;
062E:  BRA    064C
.................... 	       case 0x03:  output_high(PIN_A4);
0630:  BCF    F92.4
0632:  BSF    F89.4
.................... 			   output_high(PIN_A5);
0634:  BCF    F92.5
0636:  BSF    F89.5
.................... 			   output_low(PIN_A6);
0638:  BCF    F92.6
063A:  BCF    F89.6
.................... 			   break;
063C:  BRA    064C
.................... 	       case 0x04:  output_low(PIN_A4);
063E:  BCF    F92.4
0640:  BCF    F89.4
.................... 			   output_low(PIN_A5);
0642:  BCF    F92.5
0644:  BCF    F89.5
.................... 			   output_high(PIN_A6);
0646:  BCF    F92.6
0648:  BSF    F89.6
.................... 			   break;
064A:  BRA    064C
.................... 	       default:	break;
.................... 	    }
.................... 	    
.................... 	    switch(lights_B[q]) {
064C:  CLRF   03
064E:  MOVF   30,W
0650:  ADDLW  27
0652:  MOVWF  FE9
0654:  MOVLW  00
0656:  ADDWFC 03,W
0658:  MOVWF  FEA
065A:  MOVF   FEF,W
065C:  XORLW  01
065E:  BZ    066E
0660:  XORLW  03
0662:  BZ    067C
0664:  XORLW  01
0666:  BZ    068A
0668:  XORLW  07
066A:  BZ    0698
066C:  BRA    06A6
.................... 	       case 0x01:  output_high(PIN_E0);
066E:  BCF    F96.0
0670:  BSF    F8D.0
.................... 			   output_low(PIN_E1);
0672:  BCF    F96.1
0674:  BCF    F8D.1
.................... 			   output_low(PIN_E2);
0676:  BCF    F96.2
0678:  BCF    F8D.2
.................... 			   break;
067A:  BRA    06A6
.................... 	       case 0x02:  output_low(PIN_E0);
067C:  BCF    F96.0
067E:  BCF    F8D.0
.................... 			   output_high(PIN_E1);
0680:  BCF    F96.1
0682:  BSF    F8D.1
.................... 			   output_low(PIN_E2);
0684:  BCF    F96.2
0686:  BCF    F8D.2
.................... 			   break;
0688:  BRA    06A6
.................... 	       case 0x03:  output_high(PIN_E0);
068A:  BCF    F96.0
068C:  BSF    F8D.0
.................... 			   output_high(PIN_E1);
068E:  BCF    F96.1
0690:  BSF    F8D.1
.................... 			   output_low(PIN_E2);
0692:  BCF    F96.2
0694:  BCF    F8D.2
.................... 			   break;
0696:  BRA    06A6
.................... 	       case 0x04:  output_low(PIN_E0);
0698:  BCF    F96.0
069A:  BCF    F8D.0
.................... 			   output_low(PIN_E1);
069C:  BCF    F96.1
069E:  BCF    F8D.1
.................... 			   output_high(PIN_E2);
06A0:  BCF    F96.2
06A2:  BSF    F8D.2
.................... 			   break;
06A4:  BRA    06A6
.................... 	       default:	break;
.................... 	    }
.................... 	    
.................... 	    delay_ms(2000);
06A6:  MOVLW  08
06A8:  MOVWF  31
06AA:  MOVLW  FA
06AC:  MOVWF  36
06AE:  RCALL  0120
06B0:  DECFSZ 31,F
06B2:  BRA    06AA
06B4:  INCF   30,F
06B6:  BRA    05EA
.................... 	 }
....................       }
06B8:  BRA    05AA
....................       
....................    }
.................... 
.................... }
.................... 
06BA:  SLEEP 
.................... 
.................... 
.................... void analogs(void) {
....................    set_adc_channel(0);						// select ADC channel 0 
*
02E4:  MOVLW  00
02E6:  MOVWF  01
02E8:  MOVF   FC2,W
02EA:  ANDLW  C3
02EC:  IORWF  01,W
02EE:  MOVWF  FC2
....................    delay_us(30);						// 30us time delay
02F0:  MOVLW  13
02F2:  MOVWF  00
02F4:  DECFSZ 00,F
02F6:  BRA    02F4
02F8:  BRA    02FA
....................    value0 = read_adc();
02FA:  BSF    FC2.1
02FC:  BTFSC  FC2.1
02FE:  BRA    02FC
0300:  MOVFF  FC4,1B
.................... 
....................    set_adc_channel(1);						// select ADC channel 1
0304:  MOVLW  04
0306:  MOVWF  01
0308:  MOVF   FC2,W
030A:  ANDLW  C3
030C:  IORWF  01,W
030E:  MOVWF  FC2
....................    delay_us(30);
0310:  MOVLW  13
0312:  MOVWF  00
0314:  DECFSZ 00,F
0316:  BRA    0314
0318:  BRA    031A
....................    value1 = read_adc();
031A:  BSF    FC2.1
031C:  BTFSC  FC2.1
031E:  BRA    031C
0320:  MOVFF  FC4,1C
.................... 
....................    set_adc_channel(2);						// select ADC channel 2
0324:  MOVLW  08
0326:  MOVWF  01
0328:  MOVF   FC2,W
032A:  ANDLW  C3
032C:  IORWF  01,W
032E:  MOVWF  FC2
....................    delay_us(30);
0330:  MOVLW  13
0332:  MOVWF  00
0334:  DECFSZ 00,F
0336:  BRA    0334
0338:  BRA    033A
....................    value2 = read_adc();
033A:  BSF    FC2.1
033C:  BTFSC  FC2.1
033E:  BRA    033C
0340:  MOVFF  FC4,1D
0344:  RETURN 0
.................... }
.................... 
.................... 
.................... void rotate(void) {
....................    if (value0 < 120) {
*
04CC:  MOVF   1B,W
04CE:  SUBLW  77
04D0:  BNC   04DA
.................... 	 output_high(PIN_C0);					// set pin 0 high
04D2:  BCF    F94.0
04D4:  BSF    F8B.0
.................... 	 output_low(PIN_C1);					// set pin 1 low
04D6:  BCF    F94.1
04D8:  BCF    F8B.1
....................       }
....................       
....................       if (value0 > 170) {
04DA:  MOVF   1B,W
04DC:  SUBLW  AA
04DE:  BC    04E8
.................... 	 output_high(PIN_C1);					// set pin 1 high
04E0:  BCF    F94.1
04E2:  BSF    F8B.1
.................... 	 output_low(PIN_C0);					// set pin 0 low
04E4:  BCF    F94.0
04E6:  BCF    F8B.0
....................       }
....................       
....................       if ((value0 > 120) & (value0 < 170)) {
04E8:  MOVF   1B,W
04EA:  SUBLW  78
04EC:  BNC   04F2
04EE:  MOVLW  00
04F0:  BRA    04F4
04F2:  MOVLW  01
04F4:  MOVWF  31
04F6:  MOVF   1B,W
04F8:  SUBLW  A9
04FA:  BC    0500
04FC:  MOVLW  00
04FE:  BRA    0502
0500:  MOVLW  01
0502:  ANDWF  31,W
0504:  BZ    050E
.................... 	output_low(PIN_C0);					// set pin 0 low
0506:  BCF    F94.0
0508:  BCF    F8B.0
.................... 	output_low(PIN_C1);					// set pin 1 low 
050A:  BCF    F94.1
050C:  BCF    F8B.1
....................       }
050E:  GOTO   05E2 (RETURN)
.................... }
.................... 
.................... void printanalogs(void) {
....................    lcd_gotoxy(1, 1);
*
0464:  MOVLW  01
0466:  MOVWF  35
0468:  MOVWF  36
046A:  RCALL  0346
....................    printf(lcd_putc, "Value0 = %3u", value0);
046C:  MOVLW  F6
046E:  MOVWF  FF6
0470:  MOVLW  00
0472:  MOVWF  FF7
0474:  MOVLW  09
0476:  MOVWF  31
0478:  RCALL  03B8
047A:  MOVFF  1B,31
047E:  MOVLW  13
0480:  MOVWF  32
0482:  RCALL  03FE
....................    
....................    lcd_gotoxy(1, 2);
0484:  MOVLW  01
0486:  MOVWF  35
0488:  MOVLW  02
048A:  MOVWF  36
048C:  RCALL  0346
....................    printf(lcd_putc, "Value1 = %3u", value1);
048E:  MOVLW  04
0490:  MOVWF  FF6
0492:  MOVLW  01
0494:  MOVWF  FF7
0496:  MOVLW  09
0498:  MOVWF  31
049A:  RCALL  03B8
049C:  MOVFF  1C,31
04A0:  MOVLW  13
04A2:  MOVWF  32
04A4:  RCALL  03FE
....................    
....................    lcd_gotoxy(21, 1);
04A6:  MOVLW  15
04A8:  MOVWF  35
04AA:  MOVLW  01
04AC:  MOVWF  36
04AE:  RCALL  0346
....................    printf(lcd_putc, "Value2 = %3u", value2);
04B0:  MOVLW  12
04B2:  MOVWF  FF6
04B4:  MOVLW  01
04B6:  MOVWF  FF7
04B8:  MOVLW  09
04BA:  MOVWF  31
04BC:  RCALL  03B8
04BE:  MOVFF  1D,31
04C2:  MOVLW  13
04C4:  MOVWF  32
04C6:  RCALL  03FE
04C8:  GOTO   05D8 (RETURN)
....................    
....................    // printf("Value = %u \r\1", value0);
.................... }
.................... 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E16   PUT BROWNOUT BORV28 NOVREGEN NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
